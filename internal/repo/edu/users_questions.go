// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package edu

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UsersQuestion is an object representing the database table.
type UsersQuestion struct {
	ID            int64       `db:"id" pg:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	QuestionID    int64       `db:"question_id" pg:"question_id" boil:"question_id" json:"question_id" toml:"question_id" yaml:"question_id"`
	UserID        int64       `db:"user_id" pg:"user_id" boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	TotalCorrect  int64       `db:"total_correct" pg:"total_correct" boil:"total_correct" json:"total_correct" toml:"total_correct" yaml:"total_correct"`
	TotalWrong    int64       `db:"total_wrong" pg:"total_wrong" boil:"total_wrong" json:"total_wrong" toml:"total_wrong" yaml:"total_wrong"`
	IsEdu         bool        `db:"is_edu" pg:"is_edu" boil:"is_edu" json:"is_edu" toml:"is_edu" yaml:"is_edu"`
	PollID        null.String `db:"poll_id" pg:"poll_id" boil:"poll_id" json:"poll_id,omitempty" toml:"poll_id" yaml:"poll_id,omitempty"`
	TimeRepeat    time.Time   `db:"time_repeat" pg:"time_repeat" boil:"time_repeat" json:"time_repeat" toml:"time_repeat" yaml:"time_repeat"`
	TotalSerial   int64       `db:"total_serial" pg:"total_serial" boil:"total_serial" json:"total_serial" toml:"total_serial" yaml:"total_serial"`
	CorrectAnswer null.Int64  `db:"correct_answer" pg:"correct_answer" boil:"correct_answer" json:"correct_answer,omitempty" toml:"correct_answer" yaml:"correct_answer,omitempty"`
	IsPause       bool        `db:"is_pause" pg:"is_pause" boil:"is_pause" json:"is_pause" toml:"is_pause" yaml:"is_pause"`
	CreatedAt     time.Time   `db:"created_at" pg:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time   `db:"updated_at" pg:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt     null.Time   `db:"deleted_at" pg:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *usersQuestionR `db:"-" pg:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L usersQuestionL  `db:"-" pg:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UsersQuestionColumns = struct {
	ID            string
	QuestionID    string
	UserID        string
	TotalCorrect  string
	TotalWrong    string
	IsEdu         string
	PollID        string
	TimeRepeat    string
	TotalSerial   string
	CorrectAnswer string
	IsPause       string
	CreatedAt     string
	UpdatedAt     string
	DeletedAt     string
}{
	ID:            "id",
	QuestionID:    "question_id",
	UserID:        "user_id",
	TotalCorrect:  "total_correct",
	TotalWrong:    "total_wrong",
	IsEdu:         "is_edu",
	PollID:        "poll_id",
	TimeRepeat:    "time_repeat",
	TotalSerial:   "total_serial",
	CorrectAnswer: "correct_answer",
	IsPause:       "is_pause",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	DeletedAt:     "deleted_at",
}

var UsersQuestionTableColumns = struct {
	ID            string
	QuestionID    string
	UserID        string
	TotalCorrect  string
	TotalWrong    string
	IsEdu         string
	PollID        string
	TimeRepeat    string
	TotalSerial   string
	CorrectAnswer string
	IsPause       string
	CreatedAt     string
	UpdatedAt     string
	DeletedAt     string
}{
	ID:            "users_questions.id",
	QuestionID:    "users_questions.question_id",
	UserID:        "users_questions.user_id",
	TotalCorrect:  "users_questions.total_correct",
	TotalWrong:    "users_questions.total_wrong",
	IsEdu:         "users_questions.is_edu",
	PollID:        "users_questions.poll_id",
	TimeRepeat:    "users_questions.time_repeat",
	TotalSerial:   "users_questions.total_serial",
	CorrectAnswer: "users_questions.correct_answer",
	IsPause:       "users_questions.is_pause",
	CreatedAt:     "users_questions.created_at",
	UpdatedAt:     "users_questions.updated_at",
	DeletedAt:     "users_questions.deleted_at",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) SIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" SIMILAR TO ?", x)
}
func (w whereHelpernull_String) NSIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var UsersQuestionWhere = struct {
	ID            whereHelperint64
	QuestionID    whereHelperint64
	UserID        whereHelperint64
	TotalCorrect  whereHelperint64
	TotalWrong    whereHelperint64
	IsEdu         whereHelperbool
	PollID        whereHelpernull_String
	TimeRepeat    whereHelpertime_Time
	TotalSerial   whereHelperint64
	CorrectAnswer whereHelpernull_Int64
	IsPause       whereHelperbool
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
	DeletedAt     whereHelpernull_Time
}{
	ID:            whereHelperint64{field: "\"users_questions\".\"id\""},
	QuestionID:    whereHelperint64{field: "\"users_questions\".\"question_id\""},
	UserID:        whereHelperint64{field: "\"users_questions\".\"user_id\""},
	TotalCorrect:  whereHelperint64{field: "\"users_questions\".\"total_correct\""},
	TotalWrong:    whereHelperint64{field: "\"users_questions\".\"total_wrong\""},
	IsEdu:         whereHelperbool{field: "\"users_questions\".\"is_edu\""},
	PollID:        whereHelpernull_String{field: "\"users_questions\".\"poll_id\""},
	TimeRepeat:    whereHelpertime_Time{field: "\"users_questions\".\"time_repeat\""},
	TotalSerial:   whereHelperint64{field: "\"users_questions\".\"total_serial\""},
	CorrectAnswer: whereHelpernull_Int64{field: "\"users_questions\".\"correct_answer\""},
	IsPause:       whereHelperbool{field: "\"users_questions\".\"is_pause\""},
	CreatedAt:     whereHelpertime_Time{field: "\"users_questions\".\"created_at\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"users_questions\".\"updated_at\""},
	DeletedAt:     whereHelpernull_Time{field: "\"users_questions\".\"deleted_at\""},
}

// UsersQuestionRels is where relationship names are stored.
var UsersQuestionRels = struct {
	Question string
	User     string
}{
	Question: "Question",
	User:     "User",
}

// usersQuestionR is where relationships are stored.
type usersQuestionR struct {
	Question *Question `db:"Question" pg:"Question" boil:"Question" json:"Question" toml:"Question" yaml:"Question"`
	User     *User     `db:"User" pg:"User" boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*usersQuestionR) NewStruct() *usersQuestionR {
	return &usersQuestionR{}
}

func (r *usersQuestionR) GetQuestion() *Question {
	if r == nil {
		return nil
	}
	return r.Question
}

func (r *usersQuestionR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// usersQuestionL is where Load methods for each relationship are stored.
type usersQuestionL struct{}

var (
	usersQuestionAllColumns            = []string{"id", "question_id", "user_id", "total_correct", "total_wrong", "is_edu", "poll_id", "time_repeat", "total_serial", "correct_answer", "is_pause", "created_at", "updated_at", "deleted_at"}
	usersQuestionColumnsWithoutDefault = []string{}
	usersQuestionColumnsWithDefault    = []string{"id", "question_id", "user_id", "total_correct", "total_wrong", "is_edu", "poll_id", "time_repeat", "total_serial", "correct_answer", "is_pause", "created_at", "updated_at", "deleted_at"}
	usersQuestionPrimaryKeyColumns     = []string{"id"}
	usersQuestionGeneratedColumns      = []string{}
)

type (
	// UsersQuestionSlice is an alias for a slice of pointers to UsersQuestion.
	// This should almost always be used instead of []UsersQuestion.
	UsersQuestionSlice []*UsersQuestion
	// UsersQuestionHook is the signature for custom UsersQuestion hook methods
	UsersQuestionHook func(context.Context, boil.ContextExecutor, *UsersQuestion) error

	usersQuestionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	usersQuestionType                 = reflect.TypeOf(&UsersQuestion{})
	usersQuestionMapping              = queries.MakeStructMapping(usersQuestionType)
	usersQuestionPrimaryKeyMapping, _ = queries.BindMapping(usersQuestionType, usersQuestionMapping, usersQuestionPrimaryKeyColumns)
	usersQuestionInsertCacheMut       sync.RWMutex
	usersQuestionInsertCache          = make(map[string]insertCache)
	usersQuestionUpdateCacheMut       sync.RWMutex
	usersQuestionUpdateCache          = make(map[string]updateCache)
	usersQuestionUpsertCacheMut       sync.RWMutex
	usersQuestionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var usersQuestionAfterSelectMu sync.Mutex
var usersQuestionAfterSelectHooks []UsersQuestionHook

var usersQuestionBeforeInsertMu sync.Mutex
var usersQuestionBeforeInsertHooks []UsersQuestionHook
var usersQuestionAfterInsertMu sync.Mutex
var usersQuestionAfterInsertHooks []UsersQuestionHook

var usersQuestionBeforeUpdateMu sync.Mutex
var usersQuestionBeforeUpdateHooks []UsersQuestionHook
var usersQuestionAfterUpdateMu sync.Mutex
var usersQuestionAfterUpdateHooks []UsersQuestionHook

var usersQuestionBeforeDeleteMu sync.Mutex
var usersQuestionBeforeDeleteHooks []UsersQuestionHook
var usersQuestionAfterDeleteMu sync.Mutex
var usersQuestionAfterDeleteHooks []UsersQuestionHook

var usersQuestionBeforeUpsertMu sync.Mutex
var usersQuestionBeforeUpsertHooks []UsersQuestionHook
var usersQuestionAfterUpsertMu sync.Mutex
var usersQuestionAfterUpsertHooks []UsersQuestionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UsersQuestion) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersQuestionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UsersQuestion) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersQuestionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UsersQuestion) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersQuestionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UsersQuestion) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersQuestionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UsersQuestion) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersQuestionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UsersQuestion) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersQuestionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UsersQuestion) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersQuestionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UsersQuestion) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersQuestionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UsersQuestion) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersQuestionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUsersQuestionHook registers your hook function for all future operations.
func AddUsersQuestionHook(hookPoint boil.HookPoint, usersQuestionHook UsersQuestionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		usersQuestionAfterSelectMu.Lock()
		usersQuestionAfterSelectHooks = append(usersQuestionAfterSelectHooks, usersQuestionHook)
		usersQuestionAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		usersQuestionBeforeInsertMu.Lock()
		usersQuestionBeforeInsertHooks = append(usersQuestionBeforeInsertHooks, usersQuestionHook)
		usersQuestionBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		usersQuestionAfterInsertMu.Lock()
		usersQuestionAfterInsertHooks = append(usersQuestionAfterInsertHooks, usersQuestionHook)
		usersQuestionAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		usersQuestionBeforeUpdateMu.Lock()
		usersQuestionBeforeUpdateHooks = append(usersQuestionBeforeUpdateHooks, usersQuestionHook)
		usersQuestionBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		usersQuestionAfterUpdateMu.Lock()
		usersQuestionAfterUpdateHooks = append(usersQuestionAfterUpdateHooks, usersQuestionHook)
		usersQuestionAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		usersQuestionBeforeDeleteMu.Lock()
		usersQuestionBeforeDeleteHooks = append(usersQuestionBeforeDeleteHooks, usersQuestionHook)
		usersQuestionBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		usersQuestionAfterDeleteMu.Lock()
		usersQuestionAfterDeleteHooks = append(usersQuestionAfterDeleteHooks, usersQuestionHook)
		usersQuestionAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		usersQuestionBeforeUpsertMu.Lock()
		usersQuestionBeforeUpsertHooks = append(usersQuestionBeforeUpsertHooks, usersQuestionHook)
		usersQuestionBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		usersQuestionAfterUpsertMu.Lock()
		usersQuestionAfterUpsertHooks = append(usersQuestionAfterUpsertHooks, usersQuestionHook)
		usersQuestionAfterUpsertMu.Unlock()
	}
}

// One returns a single usersQuestion record from the query.
func (q usersQuestionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UsersQuestion, error) {
	o := &UsersQuestion{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "edu: failed to execute a one query for users_questions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UsersQuestion records from the query.
func (q usersQuestionQuery) All(ctx context.Context, exec boil.ContextExecutor) (UsersQuestionSlice, error) {
	var o []*UsersQuestion

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "edu: failed to assign all query results to UsersQuestion slice")
	}

	if len(usersQuestionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UsersQuestion records in the query.
func (q usersQuestionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "edu: failed to count users_questions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q usersQuestionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "edu: failed to check if users_questions exists")
	}

	return count > 0, nil
}

// Question pointed to by the foreign key.
func (o *UsersQuestion) Question(mods ...qm.QueryMod) questionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.QuestionID),
	}

	queryMods = append(queryMods, mods...)

	return Questions(queryMods...)
}

// User pointed to by the foreign key.
func (o *UsersQuestion) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"tg_user_id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadQuestion allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (usersQuestionL) LoadQuestion(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsersQuestion interface{}, mods queries.Applicator) error {
	var slice []*UsersQuestion
	var object *UsersQuestion

	if singular {
		var ok bool
		object, ok = maybeUsersQuestion.(*UsersQuestion)
		if !ok {
			object = new(UsersQuestion)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUsersQuestion)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUsersQuestion))
			}
		}
	} else {
		s, ok := maybeUsersQuestion.(*[]*UsersQuestion)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUsersQuestion)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUsersQuestion))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &usersQuestionR{}
		}
		args[object.QuestionID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usersQuestionR{}
			}

			args[obj.QuestionID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`questions`),
		qm.WhereIn(`questions.id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`questions.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Question")
	}

	var resultSlice []*Question
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Question")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for questions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for questions")
	}

	if len(questionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Question = foreign
		if foreign.R == nil {
			foreign.R = &questionR{}
		}
		foreign.R.UsersQuestions = append(foreign.R.UsersQuestions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.QuestionID == foreign.ID {
				local.R.Question = foreign
				if foreign.R == nil {
					foreign.R = &questionR{}
				}
				foreign.R.UsersQuestions = append(foreign.R.UsersQuestions, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (usersQuestionL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsersQuestion interface{}, mods queries.Applicator) error {
	var slice []*UsersQuestion
	var object *UsersQuestion

	if singular {
		var ok bool
		object, ok = maybeUsersQuestion.(*UsersQuestion)
		if !ok {
			object = new(UsersQuestion)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUsersQuestion)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUsersQuestion))
			}
		}
	} else {
		s, ok := maybeUsersQuestion.(*[]*UsersQuestion)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUsersQuestion)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUsersQuestion))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &usersQuestionR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usersQuestionR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.tg_user_id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UsersQuestions = append(foreign.R.UsersQuestions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.TGUserID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UsersQuestions = append(foreign.R.UsersQuestions, local)
				break
			}
		}
	}

	return nil
}

// SetQuestion of the usersQuestion to the related item.
// Sets o.R.Question to related.
// Adds o to related.R.UsersQuestions.
func (o *UsersQuestion) SetQuestion(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Question) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"users_questions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"question_id"}),
		strmangle.WhereClause("\"", "\"", 2, usersQuestionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.QuestionID = related.ID
	if o.R == nil {
		o.R = &usersQuestionR{
			Question: related,
		}
	} else {
		o.R.Question = related
	}

	if related.R == nil {
		related.R = &questionR{
			UsersQuestions: UsersQuestionSlice{o},
		}
	} else {
		related.R.UsersQuestions = append(related.R.UsersQuestions, o)
	}

	return nil
}

// SetUser of the usersQuestion to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UsersQuestions.
func (o *UsersQuestion) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"users_questions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, usersQuestionPrimaryKeyColumns),
	)
	values := []interface{}{related.TGUserID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.TGUserID
	if o.R == nil {
		o.R = &usersQuestionR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UsersQuestions: UsersQuestionSlice{o},
		}
	} else {
		related.R.UsersQuestions = append(related.R.UsersQuestions, o)
	}

	return nil
}

// UsersQuestions retrieves all the records using an executor.
func UsersQuestions(mods ...qm.QueryMod) usersQuestionQuery {
	mods = append(mods, qm.From("\"users_questions\""), qmhelper.WhereIsNull("\"users_questions\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"users_questions\".*"})
	}

	return usersQuestionQuery{q}
}

// FindUsersQuestion retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUsersQuestion(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*UsersQuestion, error) {
	usersQuestionObj := &UsersQuestion{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"users_questions\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, usersQuestionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "edu: unable to select from users_questions")
	}

	if err = usersQuestionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return usersQuestionObj, err
	}

	return usersQuestionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UsersQuestion) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("edu: no users_questions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usersQuestionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	usersQuestionInsertCacheMut.RLock()
	cache, cached := usersQuestionInsertCache[key]
	usersQuestionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			usersQuestionAllColumns,
			usersQuestionColumnsWithDefault,
			usersQuestionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(usersQuestionType, usersQuestionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(usersQuestionType, usersQuestionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"users_questions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"users_questions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "edu: unable to insert into users_questions")
	}

	if !cached {
		usersQuestionInsertCacheMut.Lock()
		usersQuestionInsertCache[key] = cache
		usersQuestionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UsersQuestion.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UsersQuestion) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	usersQuestionUpdateCacheMut.RLock()
	cache, cached := usersQuestionUpdateCache[key]
	usersQuestionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			usersQuestionAllColumns,
			usersQuestionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("edu: unable to update users_questions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"users_questions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, usersQuestionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(usersQuestionType, usersQuestionMapping, append(wl, usersQuestionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "edu: unable to update users_questions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "edu: failed to get rows affected by update for users_questions")
	}

	if !cached {
		usersQuestionUpdateCacheMut.Lock()
		usersQuestionUpdateCache[key] = cache
		usersQuestionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q usersQuestionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "edu: unable to update all for users_questions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "edu: unable to retrieve rows affected for users_questions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UsersQuestionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("edu: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usersQuestionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"users_questions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, usersQuestionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "edu: unable to update all in usersQuestion slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "edu: unable to retrieve rows affected all in update all usersQuestion")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UsersQuestion) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("edu: no users_questions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usersQuestionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	usersQuestionUpsertCacheMut.RLock()
	cache, cached := usersQuestionUpsertCache[key]
	usersQuestionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			usersQuestionAllColumns,
			usersQuestionColumnsWithDefault,
			usersQuestionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			usersQuestionAllColumns,
			usersQuestionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("edu: unable to upsert users_questions, could not build update column list")
		}

		ret := strmangle.SetComplement(usersQuestionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(usersQuestionPrimaryKeyColumns) == 0 {
				return errors.New("edu: unable to upsert users_questions, could not build conflict column list")
			}

			conflict = make([]string, len(usersQuestionPrimaryKeyColumns))
			copy(conflict, usersQuestionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"users_questions\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(usersQuestionType, usersQuestionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(usersQuestionType, usersQuestionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "edu: unable to upsert users_questions")
	}

	if !cached {
		usersQuestionUpsertCacheMut.Lock()
		usersQuestionUpsertCache[key] = cache
		usersQuestionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UsersQuestion record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UsersQuestion) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("edu: no UsersQuestion provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), usersQuestionPrimaryKeyMapping)
		sql = "DELETE FROM \"users_questions\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"users_questions\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(usersQuestionType, usersQuestionMapping, append(wl, usersQuestionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "edu: unable to delete from users_questions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "edu: failed to get rows affected by delete for users_questions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q usersQuestionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("edu: no usersQuestionQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "edu: unable to delete all from users_questions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "edu: failed to get rows affected by deleteall for users_questions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UsersQuestionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(usersQuestionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usersQuestionPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"users_questions\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usersQuestionPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usersQuestionPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"users_questions\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, usersQuestionPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "edu: unable to delete all from usersQuestion slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "edu: failed to get rows affected by deleteall for users_questions")
	}

	if len(usersQuestionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UsersQuestion) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUsersQuestion(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UsersQuestionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UsersQuestionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usersQuestionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"users_questions\".* FROM \"users_questions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usersQuestionPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "edu: unable to reload all in UsersQuestionSlice")
	}

	*o = slice

	return nil
}

// UsersQuestionExists checks if the UsersQuestion row exists.
func UsersQuestionExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"users_questions\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "edu: unable to check if users_questions exists")
	}

	return exists, nil
}

// Exists checks if the UsersQuestion row exists.
func (o *UsersQuestion) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UsersQuestionExists(ctx, exec, o.ID)
}
