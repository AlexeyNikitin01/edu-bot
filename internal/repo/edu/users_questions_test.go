// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package edu

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUsersQuestions(t *testing.T) {
	t.Parallel()

	query := UsersQuestions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUsersQuestionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersQuestion{}
	if err = randomize.Struct(seed, o, usersQuestionDBTypes, true, usersQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsersQuestions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsersQuestionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersQuestion{}
	if err = randomize.Struct(seed, o, usersQuestionDBTypes, true, usersQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UsersQuestions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsersQuestions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsersQuestionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersQuestion{}
	if err = randomize.Struct(seed, o, usersQuestionDBTypes, true, usersQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UsersQuestionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsersQuestions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsersQuestionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersQuestion{}
	if err = randomize.Struct(seed, o, usersQuestionDBTypes, true, usersQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UsersQuestionExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if UsersQuestion exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UsersQuestionExists to return true, but got false.")
	}
}

func testUsersQuestionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersQuestion{}
	if err = randomize.Struct(seed, o, usersQuestionDBTypes, true, usersQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	usersQuestionFound, err := FindUsersQuestion(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if usersQuestionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUsersQuestionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersQuestion{}
	if err = randomize.Struct(seed, o, usersQuestionDBTypes, true, usersQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UsersQuestions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUsersQuestionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersQuestion{}
	if err = randomize.Struct(seed, o, usersQuestionDBTypes, true, usersQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UsersQuestions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUsersQuestionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	usersQuestionOne := &UsersQuestion{}
	usersQuestionTwo := &UsersQuestion{}
	if err = randomize.Struct(seed, usersQuestionOne, usersQuestionDBTypes, false, usersQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersQuestion struct: %s", err)
	}
	if err = randomize.Struct(seed, usersQuestionTwo, usersQuestionDBTypes, false, usersQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = usersQuestionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = usersQuestionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UsersQuestions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUsersQuestionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	usersQuestionOne := &UsersQuestion{}
	usersQuestionTwo := &UsersQuestion{}
	if err = randomize.Struct(seed, usersQuestionOne, usersQuestionDBTypes, false, usersQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersQuestion struct: %s", err)
	}
	if err = randomize.Struct(seed, usersQuestionTwo, usersQuestionDBTypes, false, usersQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = usersQuestionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = usersQuestionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsersQuestions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func usersQuestionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UsersQuestion) error {
	*o = UsersQuestion{}
	return nil
}

func usersQuestionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UsersQuestion) error {
	*o = UsersQuestion{}
	return nil
}

func usersQuestionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UsersQuestion) error {
	*o = UsersQuestion{}
	return nil
}

func usersQuestionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UsersQuestion) error {
	*o = UsersQuestion{}
	return nil
}

func usersQuestionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UsersQuestion) error {
	*o = UsersQuestion{}
	return nil
}

func usersQuestionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UsersQuestion) error {
	*o = UsersQuestion{}
	return nil
}

func usersQuestionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UsersQuestion) error {
	*o = UsersQuestion{}
	return nil
}

func usersQuestionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UsersQuestion) error {
	*o = UsersQuestion{}
	return nil
}

func usersQuestionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UsersQuestion) error {
	*o = UsersQuestion{}
	return nil
}

func testUsersQuestionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UsersQuestion{}
	o := &UsersQuestion{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, usersQuestionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UsersQuestion object: %s", err)
	}

	AddUsersQuestionHook(boil.BeforeInsertHook, usersQuestionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	usersQuestionBeforeInsertHooks = []UsersQuestionHook{}

	AddUsersQuestionHook(boil.AfterInsertHook, usersQuestionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	usersQuestionAfterInsertHooks = []UsersQuestionHook{}

	AddUsersQuestionHook(boil.AfterSelectHook, usersQuestionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	usersQuestionAfterSelectHooks = []UsersQuestionHook{}

	AddUsersQuestionHook(boil.BeforeUpdateHook, usersQuestionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	usersQuestionBeforeUpdateHooks = []UsersQuestionHook{}

	AddUsersQuestionHook(boil.AfterUpdateHook, usersQuestionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	usersQuestionAfterUpdateHooks = []UsersQuestionHook{}

	AddUsersQuestionHook(boil.BeforeDeleteHook, usersQuestionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	usersQuestionBeforeDeleteHooks = []UsersQuestionHook{}

	AddUsersQuestionHook(boil.AfterDeleteHook, usersQuestionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	usersQuestionAfterDeleteHooks = []UsersQuestionHook{}

	AddUsersQuestionHook(boil.BeforeUpsertHook, usersQuestionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	usersQuestionBeforeUpsertHooks = []UsersQuestionHook{}

	AddUsersQuestionHook(boil.AfterUpsertHook, usersQuestionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	usersQuestionAfterUpsertHooks = []UsersQuestionHook{}
}

func testUsersQuestionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersQuestion{}
	if err = randomize.Struct(seed, o, usersQuestionDBTypes, true, usersQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsersQuestions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUsersQuestionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersQuestion{}
	if err = randomize.Struct(seed, o, usersQuestionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UsersQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(usersQuestionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UsersQuestions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUsersQuestionToOneQuestionUsingQuestion(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UsersQuestion
	var foreign Question

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, usersQuestionDBTypes, false, usersQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersQuestion struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, questionDBTypes, false, questionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Question struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.QuestionID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Question().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddQuestionHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Question) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := UsersQuestionSlice{&local}
	if err = local.L.LoadQuestion(ctx, tx, false, (*[]*UsersQuestion)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Question == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Question = nil
	if err = local.L.LoadQuestion(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Question == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testUsersQuestionToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UsersQuestion
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, usersQuestionDBTypes, false, usersQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersQuestion struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.TGUserID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.TGUserID != foreign.TGUserID {
		t.Errorf("want: %v, got %v", foreign.TGUserID, check.TGUserID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := UsersQuestionSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*UsersQuestion)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testUsersQuestionToOneSetOpQuestionUsingQuestion(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsersQuestion
	var b, c Question

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usersQuestionDBTypes, false, strmangle.SetComplement(usersQuestionPrimaryKeyColumns, usersQuestionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, questionDBTypes, false, strmangle.SetComplement(questionPrimaryKeyColumns, questionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, questionDBTypes, false, strmangle.SetComplement(questionPrimaryKeyColumns, questionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Question{&b, &c} {
		err = a.SetQuestion(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Question != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UsersQuestions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.QuestionID != x.ID {
			t.Error("foreign key was wrong value", a.QuestionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.QuestionID))
		reflect.Indirect(reflect.ValueOf(&a.QuestionID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.QuestionID != x.ID {
			t.Error("foreign key was wrong value", a.QuestionID, x.ID)
		}
	}
}
func testUsersQuestionToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UsersQuestion
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, usersQuestionDBTypes, false, strmangle.SetComplement(usersQuestionPrimaryKeyColumns, usersQuestionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UsersQuestions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.TGUserID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.TGUserID {
			t.Error("foreign key was wrong value", a.UserID, x.TGUserID)
		}
	}
}

func testUsersQuestionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersQuestion{}
	if err = randomize.Struct(seed, o, usersQuestionDBTypes, true, usersQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUsersQuestionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersQuestion{}
	if err = randomize.Struct(seed, o, usersQuestionDBTypes, true, usersQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UsersQuestionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUsersQuestionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersQuestion{}
	if err = randomize.Struct(seed, o, usersQuestionDBTypes, true, usersQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UsersQuestions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	usersQuestionDBTypes = map[string]string{`ID`: `bigint`, `QuestionID`: `bigint`, `UserID`: `bigint`, `TotalCorrect`: `bigint`, `TotalWrong`: `bigint`, `IsEdu`: `boolean`, `TimeRepeat`: `timestamp with time zone`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`}
	_                    = bytes.MinRead
)

func testUsersQuestionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(usersQuestionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(usersQuestionAllColumns) == len(usersQuestionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UsersQuestion{}
	if err = randomize.Struct(seed, o, usersQuestionDBTypes, true, usersQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsersQuestions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, usersQuestionDBTypes, true, usersQuestionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsersQuestion struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUsersQuestionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(usersQuestionAllColumns) == len(usersQuestionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UsersQuestion{}
	if err = randomize.Struct(seed, o, usersQuestionDBTypes, true, usersQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsersQuestions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, usersQuestionDBTypes, true, usersQuestionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsersQuestion struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(usersQuestionAllColumns, usersQuestionPrimaryKeyColumns) {
		fields = usersQuestionAllColumns
	} else {
		fields = strmangle.SetComplement(
			usersQuestionAllColumns,
			usersQuestionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UsersQuestionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUsersQuestionsUpsert(t *testing.T) {
	t.Parallel()

	if len(usersQuestionAllColumns) == len(usersQuestionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UsersQuestion{}
	if err = randomize.Struct(seed, &o, usersQuestionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UsersQuestion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UsersQuestion: %s", err)
	}

	count, err := UsersQuestions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, usersQuestionDBTypes, false, usersQuestionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsersQuestion struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UsersQuestion: %s", err)
	}

	count, err = UsersQuestions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
