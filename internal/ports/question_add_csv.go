package ports

import (
	"encoding/csv"
	"fmt"
	"io"
	"strings"

	"gopkg.in/telebot.v3"

	"bot/internal/app"
)

const (
	// CSV –æ–±—Ä–∞–±–æ—Ç–∫–∞
	MSG_CSV_INVALID_FILE       = "üìõ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .csv"
	MSG_CSV_FILE_LOAD_ERROR    = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª: "
	MSG_CSV_INVALID_FORMAT     = "‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ CSV —Ñ–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV"
	MSG_CSV_PARSE_ERROR        = "‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ CSV: %v"
	MSG_CSV_SUCCESS_TEMPLATE   = "‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: %d"
	MSG_CSV_ERRORS_TEMPLATE    = "\n‚ùå –û—à–∏–±–æ–∫: %d"
	MSG_CSV_ERRORS_LIST_HEADER = "\n\n–°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫:\n"
	MSG_CSV_ERRORS_TRUNCATED   = "\n\n–ü–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫ –∏–∑ %d:\n%s"
	MSG_CSV_ADVICE_TEXT        = "\n\n‚ÑπÔ∏è –°–æ–≤–µ—Ç: –î–ª—è —Ç–µ–∫—Å—Ç–∞ —Å ; –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–≤—ã—á–∫–∏: \"–¢–µ–∫—Å—Ç —Å ; –≤–Ω—É—Ç—Ä–∏\""
	MSG_CSV_ALL_FAILED         = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö"
	MSG_CSV_MIN_FIELDS_ERROR   = "‚Ä¢ –°—Ç—Ä–æ–∫–∞ %d: —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 3 –ø–æ–ª—è (–≤–æ–ø—Ä–æ—Å;—Ç–µ–≥;–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç)"
	MSG_CSV_EMPTY_FIELDS_ERROR = "‚Ä¢ –°—Ç—Ä–æ–∫–∞ %d: –≤–æ–ø—Ä–æ—Å, —Ç–µ–≥ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏"
	MSG_CSV_FORMAT_EXAMPLE     = "–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:\n\"–í–æ–ø—Ä–æ—Å —Å ; –≤–Ω—É—Ç—Ä–∏\";–¢–µ–≥;\"–û—Ç–≤–µ—Ç —Å ;\"\n–û–±—ã—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å;–¢–µ–≥;–û—Ç–≤–µ—Ç"
)

func setQuestionsByCSV(domain app.Apper) telebot.HandlerFunc {
	return func(ctx telebot.Context) error {
		var records [][]string
		var err error
		var isFile bool

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
		if ctx.Message().Document != nil {
			if !strings.HasSuffix(ctx.Message().Document.FileName, ".csv") {
				return ctx.Send(MSG_CSV_INVALID_FILE)
			}

			file, err := ctx.Bot().File(&ctx.Message().Document.File)
			if err != nil {
				return ctx.Send(MSG_CSV_FILE_LOAD_ERROR + err.Error())
			}
			defer file.Close()

			records, err = parseCSV(file)
			if err != nil {
				return ctx.Send(fmt.Sprintf(MSG_CSV_PARSE_ERROR, err))
			}
			isFile = true
		} else {
			text := strings.TrimSpace(ctx.Text())
			if text == "" {
				return ctx.Send(MSG_CSV_INVALID_FORMAT + "\n\n" + MSG_CSV_FORMAT_EXAMPLE)
			}

			records, err = parseCSV(strings.NewReader(text))
			if err != nil {
				return ctx.Send(fmt.Sprintf(MSG_CSV_PARSE_ERROR, err) + "\n\n" + MSG_CSV_FORMAT_EXAMPLE)
			}
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–µ–π
		userID := ctx.Sender().ID
		var successCount, errorCount int
		var errorLines []string

		for i, record := range records {
			lineNum := i + 1

			// –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
			if len(record) < 3 {
				errorCount++
				errorLines = append(errorLines, fmt.Sprintf(MSG_CSV_MIN_FIELDS_ERROR, lineNum))
				continue
			}

			question := strings.TrimSpace(record[0])
			tag := strings.TrimSpace(record[1])
			correctAnswer := strings.TrimSpace(record[2])

			// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç—ã—Ö –ø–æ–ª–µ–π
			if question == "" || tag == "" || correctAnswer == "" {
				errorCount++
				errorLines = append(errorLines, fmt.Sprintf(MSG_CSV_EMPTY_FIELDS_ERROR, lineNum))
				continue
			}

			// –°–±–æ—Ä –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
			var wrongAnswers []string
			for j := 3; j < len(record); j++ {
				if ans := strings.TrimSpace(record[j]); ans != "" {
					wrongAnswers = append(wrongAnswers, ans)
				}
			}

			// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
			allAnswers := append([]string{correctAnswer}, wrongAnswers...)
			if err := domain.SaveQuestions(
				GetContext(ctx), question, tag, allAnswers, userID,
			); err != nil {
				errorCount++
				errorLines = append(errorLines, fmt.Sprintf("‚Ä¢ –°—Ç—Ä–æ–∫–∞ %d: %v", lineNum, err))
				continue
			}

			successCount++
		}

		// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
		msg := fmt.Sprintf(MSG_CSV_SUCCESS_TEMPLATE, successCount)
		if errorCount > 0 {
			msg += fmt.Sprintf(MSG_CSV_ERRORS_TEMPLATE, errorCount)

			if len(errorLines) <= 5 {
				msg += MSG_CSV_ERRORS_LIST_HEADER + strings.Join(errorLines, "\n")
			} else {
				msg += fmt.Sprintf(MSG_CSV_ERRORS_TRUNCATED, len(errorLines), strings.Join(errorLines[:5], "\n"))
			}

			if !isFile {
				msg += MSG_CSV_ADVICE_TEXT
			}
		}

		if successCount == 0 && errorCount > 0 {
			msg = MSG_CSV_ALL_FAILED + "\n\n" + MSG_CSV_FORMAT_EXAMPLE
		}

		return ctx.Send(msg, telebot.ModeHTML)
	}
}

// parseCSV –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç CSV —Å —Ç–æ—á–∫–∞–º–∏ —Å –∑–∞–ø—è—Ç–æ–π –≤–Ω—É—Ç—Ä–∏ –ø–æ–ª–µ–π
func parseCSV(r io.Reader) ([][]string, error) {
	reader := csv.NewReader(r)
	reader.Comma = ';'
	reader.LazyQuotes = true // –†–∞–∑—Ä–µ—à–∞–µ—Ç –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤ –ø–æ–ª—è—Ö
	reader.TrimLeadingSpace = true

	var records [][]string
	for {
		record, err := reader.Read()
		if err == io.EOF {
			break
		}
		if err != nil {
			return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏: %v", err)
		}
		records = append(records, record)
	}
	return records, nil
}
