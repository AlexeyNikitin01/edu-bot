package ports

import (
	"strconv"
	"strings"

	"gopkg.in/telebot.v3"

	"bot/internal/app"
	"bot/internal/repo/edu"
)

const (
	INLINE_BTN_TAGS                            = "tags"
	INLINE_BTN_REPEAT_QUESTION                 = "toggle_repeat"
	INLINE_BTN_DELETE_QUESTION                 = "delete_question"
	INLINE_BTN_DELETE_QUESTIONS_BY_TAG         = "delete_tag"
	INLINE_BTN_DELETE_QUESTION_AFTER_POLL      = "delete_question_after_poll"
	INLINE_BTN_DELETE_QUESTION_AFTER_POLL_HIGH = "delete_question_after_poll_high"
	INLINE_BTN_REPEAT_QUESTION_AFTER_POLL      = "repeat_question_after_poll"
	INLINE_BTN_REPEAT_QUESTION_AFTER_POLL_HIGH = "repeat_question_after_poll_high"
	INLINE_BTN_QUESTION_BY_TAG                 = "question_by_tag"
	INLINE_FORGOT_HIGH_QUESTION                = "forgot_high_question"
	INLINE_REMEMBER_HIGH_QUESTION              = "remember_high_question"
	INLINE_NEXT_QUESTION                       = "next_question"
	INLINE_EDIT_TAG                            = "edit_tag"
	INLINE_EDIT_QUESTION                       = "edit_question"
	INLINE_EDIT_NAME_QUESTION                  = "inline_edit_name_question"
	INLINE_EDIT_ANSWER_QUESTION                = "inline_edit_answer_question"
	INLINE_EDIT_NAME_TAG_QUESTION              = "inline_edit_name_tag_question"
	INLINE_BACK_TAGS                           = "back_to_tags"
	INLINE_PAUSE_TAG                           = "pause_tag"
	INLINE_BTN_QUESTION_PAGE                   = "inline_btn_page"

	INLINE_NAME_DELETE_AFTER_POLL = "üóëÔ∏è"
	INLINE_NAME_REPEAT_AFTER_POLL = "Ô∏è–ü–û–í–¢–û–†–ï–ù–ò–ï"
	INLINE_NAME_DELETE            = "üóëÔ∏è"

	BTN_ADD_QUESTION       = "‚ûï –í–æ–ø—Ä–æ—Å"
	BTN_MANAGMENT_QUESTION = "üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
	BTN_ADD_CSV            = "‚ûï –í–æ–ø—Ä–æ—Å—ã CSV"
	BTN_NEXT_QUESTION      = "üåÄ –î–∞–ª—å—à–µ"

	MSG_WRONG_BTN = "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ."

	MSG_GRETING = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n" +
		"ü§ñ –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –±–∞–∑—ã –≤–æ–ø—Ä–æ—Å–æ–≤. –ë–æ—Ç —Å–∞–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –≤–æ–ø—Ä–æ—Å—ã!\n\n" +
		"‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:\n\n" +
		"üîπ \"‚ûï –í–æ–ø—Ä–æ—Å\" ‚Äî –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –≤—Ä—É—á–Ω—É—é.\n\n" +
		"üîπ \"‚ûï –í–æ–ø—Ä–æ—Å—ã CSV\" ‚Äî –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ CSV.\n\n" +
		"üîπ \"üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\" ‚Äî –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n" +
		"üîπ \"üåÄ –î–∞–ª—å—à–µ\" ‚Äî –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π!"

	MSG_CSV = `üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV –¥–∞–Ω–Ω—ã–µ (—Ñ–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç):

	–§–æ—Ä–º–∞—Ç:
	–í–æ–ø—Ä–æ—Å;–¢–µ–≥;–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç[;–î—Ä—É–≥–∏–µ –æ—Ç–≤–µ—Ç—ã...]
	
	–ï—Å–ª–∏ –≤ –≤–æ–ø—Ä–æ—Å–µ/–æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å ";", –∑–∞–∫–ª—é—á–∏—Ç–µ –µ–≥–æ –≤ –∫–∞–≤—ã—á–∫–∏:
	"–í–æ–ø—Ä–æ—Å —Å ; –≤–Ω—É—Ç—Ä–∏";–¢–µ–≥;"–û—Ç–≤–µ—Ç —Å ;"
	
	–ü—Ä–∏–º–µ—Ä—ã:
	1. –ü—Ä–æ—Å—Ç–æ–π: –ß—Ç–æ —Ç–∞–∫–æ–µ GPT?;AI;Generative Pre-trained Transformer
	2. –°–ª–æ–∂–Ω—ã–π: "–ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç: x++; y--;?";–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ;"1; 2; 3"`

	CMD_START         = "/start"
	CMD_CANCEL string = "/cancel"
)

func routers(b *telebot.Bot, domain *app.App, dispatcher *QuestionDispatcher) {
	b.Handle(CMD_START, func(ctx telebot.Context) error {
		return ctx.Send(MSG_GRETING, mainMenu())
	})

	// INLINES BUTTONS
	b.Handle(&telebot.InlineButton{Unique: INLINE_BTN_REPEAT_QUESTION}, handleToggleRepeat(domain))
	b.Handle(&telebot.InlineButton{Unique: INLINE_BTN_DELETE_QUESTION}, deleteQuestion(domain))
	b.Handle(&telebot.InlineButton{Unique: INLINE_BTN_DELETE_QUESTIONS_BY_TAG}, deleteQuestionByTag(domain))
	b.Handle(&telebot.InlineButton{Unique: INLINE_BTN_TAGS}, func(c telebot.Context) error {
		return add(domain)(c)
	})
	b.Handle(&telebot.InlineButton{Unique: INLINE_BTN_QUESTION_BY_TAG}, func(ctx telebot.Context) error {
		return questionByTag(ctx.Data())(ctx)
	})
	b.Handle(&telebot.InlineButton{Unique: INLINE_BACK_TAGS}, func(ctx telebot.Context) error {
		return backTags(domain)(ctx)
	})
	b.Handle(&telebot.InlineButton{Unique: INLINE_PAUSE_TAG}, func(ctx telebot.Context) error {
		return pauseTag(domain)(ctx)
	})
	b.Handle(&telebot.InlineButton{Unique: INLINE_FORGOT_HIGH_QUESTION}, forgotQuestion(domain, dispatcher))
	b.Handle(&telebot.InlineButton{Unique: INLINE_REMEMBER_HIGH_QUESTION}, rememberQuestion(domain, dispatcher))
	b.Handle(&telebot.InlineButton{Unique: INLINE_BTN_REPEAT_QUESTION_AFTER_POLL}, repeatQuestionAfterPoll(domain))
	b.Handle(&telebot.InlineButton{Unique: INLINE_BTN_REPEAT_QUESTION_AFTER_POLL_HIGH}, repeatQuestionAfterPollHigh(domain))
	b.Handle(&telebot.InlineButton{Unique: INLINE_BTN_DELETE_QUESTION_AFTER_POLL}, deleteQuestionAfterPoll(domain, dispatcher))
	b.Handle(&telebot.InlineButton{Unique: INLINE_BTN_DELETE_QUESTION_AFTER_POLL_HIGH}, deleteQuestionAfterPollHigh(domain, dispatcher))
	b.Handle(&telebot.InlineButton{Unique: INLINE_NEXT_QUESTION}, nextQuestion(dispatcher))
	b.Handle(&telebot.InlineButton{Unique: INLINE_EDIT_TAG}, setEdit(edu.TableNames.Tags, domain))
	b.Handle(&telebot.InlineButton{Unique: INLINE_EDIT_QUESTION}, getForUpdate(domain))
	b.Handle(&telebot.InlineButton{Unique: INLINE_EDIT_NAME_QUESTION}, setEdit(edu.QuestionTableColumns.Question, domain))
	b.Handle(&telebot.InlineButton{Unique: INLINE_EDIT_NAME_TAG_QUESTION}, setEdit(edu.QuestionTableColumns.TagID, domain))
	b.Handle(&telebot.InlineButton{Unique: INLINE_EDIT_ANSWER_QUESTION}, setEdit(edu.AnswerTableColumns.Answer, domain))

	b.Handle(&telebot.InlineButton{Unique: INLINE_BTN_QUESTION_PAGE + "_prev"}, func(ctx telebot.Context) error {
		dataParts := strings.Split(ctx.Data(), "_")
		if len(dataParts) != 2 {
			return ctx.Respond(&telebot.CallbackResponse{
				Text: "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö",
			})
		}

		page, err := strconv.Atoi(dataParts[0])
		if err != nil {
			return ctx.Respond(&telebot.CallbackResponse{
				Text: "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã",
			})
		}

		tag := dataParts[1]
		if tag == "" {
			return ctx.Respond(&telebot.CallbackResponse{
				Text: "–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω —Ç–µ–≥",
			})
		}

		return showQuestionsPage(ctx, tag, page-1)
	})

	b.Handle(&telebot.InlineButton{Unique: INLINE_BTN_QUESTION_PAGE + "_next"}, func(ctx telebot.Context) error {
		dataParts := strings.Split(ctx.Data(), "_")
		if len(dataParts) != 2 {
			return ctx.Respond(&telebot.CallbackResponse{
				Text: "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö",
			})
		}

		page, err := strconv.Atoi(dataParts[0])
		if err != nil {
			return ctx.Respond(&telebot.CallbackResponse{
				Text: "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã",
			})
		}

		tag := dataParts[1]
		if tag == "" {
			return ctx.Respond(&telebot.CallbackResponse{
				Text: "–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω —Ç–µ–≥",
			})
		}

		return showQuestionsPage(ctx, tag, page+1)
	})

	// ADD CSV
	b.Handle(telebot.OnDocument, setQuestionsByCSV(domain))

	// WORK WITH MENU
	b.Handle(telebot.OnText, func(ctx telebot.Context) error {
		// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
		if draft, ok := drafts[GetUserFromContext(ctx).TGUserID]; ok && draft.Step > 0 {
			return add(domain)(ctx)
		}

		text := ctx.Text()

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ —Ç–µ–∫—Å—Ç –±—ã—Ç—å CSV (—Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å)
		if strings.Contains(text, ";") && len(strings.Split(text, ";")) >= 3 {
			return setQuestionsByCSV(domain)(ctx)
		}

		switch ctx.Text() {
		case BTN_ADD_QUESTION:
			return add(domain)(ctx)
		case BTN_MANAGMENT_QUESTION:
			return showRepeatTagList(domain)(ctx)
		case BTN_ADD_CSV:
			return ctx.Send(MSG_CSV, telebot.ModeHTML)
		case BTN_NEXT_QUESTION:
			return nextQuestion(dispatcher)(ctx)
		default:
			return ctx.Send(MSG_WRONG_BTN, mainMenu())
		}
	})

	b.Handle(telebot.OnPollAnswer, checkPollAnswer(domain, dispatcher))

	// –í–æ—Ä–∫–µ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã —Ä–∞—Å—Å—ã–ª–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	dispatcher.StartPollingLoop()
}

func mainMenu() *telebot.ReplyMarkup {
	menu := &telebot.ReplyMarkup{ResizeKeyboard: true}

	btnAdd := menu.Text(BTN_ADD_QUESTION)
	btnMark := menu.Text(BTN_MANAGMENT_QUESTION)
	btnCSV := menu.Text(BTN_ADD_CSV)
	btnNext := menu.Text(BTN_NEXT_QUESTION)

	menu.Reply(
		menu.Row(btnAdd, btnCSV),
		menu.Row(btnMark, btnNext),
	)

	return menu
}
