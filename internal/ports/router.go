package ports

import (
	"context"

	"gopkg.in/telebot.v3"

	"bot/internal/app"
)

const (
	TAGS = "getTags"

	ADD_QUESTION = "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å"
)

func routers(ctx context.Context, b *telebot.Bot, domain *app.App) {
	b.Handle("/start", start())

	b.Handle(&telebot.InlineButton{Unique: "toggle_repeat"}, handleToggleRepeat())
	b.Handle(&telebot.InlineButton{Unique: "delete_repeat"}, deleteRepeat())
	b.Handle(&telebot.InlineButton{Unique: TAGS}, func(c telebot.Context) error {
		return add(domain)(c)
	})

	b.Handle(telebot.OnText, func(ctx telebot.Context) error {
		userID := ctx.Sender().ID

		// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
		if draft, ok := drafts[userID]; ok && draft.Step > 0 {
			return add(domain)(ctx)
		}

		// TODO: –Ω—É–∂–Ω–æ —Å–º–æ—Ç—Ä–µ—Ç—å –µ—Å–ª–∏ –ø–∞—É–∑–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ª–æ–º–∞—Ç—å
		switch ctx.Text() {
		case ADD_QUESTION:
			if err := getTags(ctx, GetUserFromContext(ctx).TGUserID, domain); err != nil {
				return err
			}
			drafts[userID] = &QuestionDraft{Step: 1}
			return add(domain)(ctx)
		case "üìö –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ":
			return showRepeatList()(ctx)
		case "üóë –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å":
			return deleteList()(ctx)
		case "‚è∏Ô∏è –ü–∞—É–∑–∞":
			return pause()(ctx)
		case "‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç":
			return resume()(ctx)
		default:
			return ctx.Send("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ.", mainMenu())
		}
	})

	dispatcher := NewDispatcher(ctx, domain, b)
	dispatcher.RegisterPollAnswerHandler()
	dispatcher.StartPollingLoop()
}
