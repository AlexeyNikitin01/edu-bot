package ports

import (
	"context"
	"fmt"
	"log"
	"strconv"
	"strings"
	"sync"
	"time"

	"gopkg.in/telebot.v3"

	"bot/internal/app"
	"bot/internal/repo/edu"
)

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–Ω–æ–ø–æ–∫
const (
	MSG_FORGOT        = "–°–õ–û–•–ñ–ù–û" // –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ "–ó–∞–±—ã–ª" - —Å–ª–æ–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å
	MSG_REMEMBER      = "–õ–ï–ì–ö–û"   // –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–Ω—é" - –ª–µ–≥–∫–∏–π –≤–æ–ø—Ä–æ—Å
	MSG_NEXT_QUESTION = "üòé"       // –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞

	BtnShowAnswer = "üìù –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç" // –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
	BtnRepeat     = "üîî"                // –ö–Ω–æ–ø–∫–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –æ–±—ã—á–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
	BtnRepeatEdu  = "üí§"                // –ö–Ω–æ–ø–∫–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –æ–±—É—á–∞—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
	BtnDelete     = "üóëÔ∏è"               // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
	BtnEdit       = "‚úèÔ∏è"               // –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
)

// QuestionDispatcher —É–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∏–∑–∞—Ü–∏–µ–π –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
//
// –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
// - –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
// - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ Redis –∫—ç—à
// - –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
// - –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
type QuestionDispatcher struct {
	domain app.Apper       // –î–æ–º–µ–Ω–Ω—ã–π —Å–ª–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
	bot    *telebot.Bot    // –ö–ª–∏–µ–Ω—Ç Telegram –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
	ctx    context.Context // –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è graceful shutdown
	cache  app.UserCacher  // –ö—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
	done   chan struct{}   // –ö–∞–Ω–∞–ª —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
	wg     sync.WaitGroup  // –ì—Ä—É–ø–ø–∞ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä—É—Ç–∏–Ω–∞–º–∏
}

// NewDispatcher —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä QuestionDispatcher
//
// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
//   - ctx: –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
//   - domain: –¥–æ–º–µ–Ω–Ω—ã–π —Å–ª–æ–π —Å –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–æ–π
//   - bot: –∫–ª–∏–µ–Ω—Ç Telegram –±–æ—Ç–∞
//   - cache: –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
//
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
//   - *QuestionDispatcher: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä –≤–æ–ø—Ä–æ—Å–æ–≤
func NewDispatcher(ctx context.Context, domain app.Apper, bot *telebot.Bot, cache app.UserCacher) *QuestionDispatcher {
	return &QuestionDispatcher{
		domain: domain,
		bot:    bot,
		ctx:    ctx,
		cache:  cache,
		done:   make(chan struct{}),
		wg:     sync.WaitGroup{},
	}
}

// Stop –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç graceful shutdown –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
//
// –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
//   - –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∫–∞–Ω–∞–ª done –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤ –æ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
//   - –û–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –≥–æ—Ä—É—Ç–∏–Ω —á–µ—Ä–µ–∑ WaitGroup
//   - –õ–æ–≥–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É
func (d *QuestionDispatcher) Stop() {
	close(d.done) // –°–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö –≥–æ—Ä—É—Ç–∏–Ω
	d.wg.Wait()   // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
	log.Println("QuestionDispatcher stopped")
}

// StartPollingLoop –∑–∞–ø—É—Å–∫–∞–µ—Ç –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –æ–ø—Ä–æ—Å–∞ –¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∏–∑–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
//
// –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã:
//  1. –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
//  2. –ö–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
//  3. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Redis –∫—ç—à –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
//  4. –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–æ—Ä–∫–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
//
// –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:
//   - –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞: 2 —Å–µ–∫—É–Ω–¥—ã
//   - –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ü–∏–∫–ª–∞: ~100-500 –º—Å
//   - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: ~500 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π/—Å–µ–∫—É–Ω–¥—É
//
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫:
//   - –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ Redis –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
//   - –ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
func (d *QuestionDispatcher) StartPollingLoop() {
	log.Println("QuestionDispatcher start")
	d.wg.Add(1)
	go func() {
		defer d.wg.Done()

		ticker := time.NewTicker(2 * time.Second)
		defer ticker.Stop()

		for {
			select {
			case <-d.done:
				return
			case <-d.ctx.Done():
				return
			case <-ticker.C:
				// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ—Ç–æ—Ä—ã–µ –∂–¥—É—Ç –æ—Ç–≤–µ—Ç–∞ –∏–∑ Redis
				activeUsers, err := d.cache.GetAllWaitingUsers(d.ctx)
				if err != nil {
					log.Println("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Redis:", err)
					continue
				}

				// –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å
				// –ò—Å–∫–ª—é—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
				users, err := d.domain.GetUsersForSend(d.ctx, activeUsers)
				if err != nil {
					log.Println("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", err)
					continue
				}

				// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				for _, user := range users {
					userID := user.TGUserID
					d.wg.Add(1)
					go d.worker(userID, &d.wg)
				}
			}
		}
	}()
}

// worker –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –≤–æ–ø—Ä–æ—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
//
// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
//   - userID: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
//   - wg: WaitGroup –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ—Ä—É—Ç–∏–Ω—ã
//
// –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:
//  1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Redis
//  2. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
//  3. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
//  4. –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
//
// –°–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã: 2 Redis –∑–∞–ø—Ä–æ—Å–∞ + 1 DB –∑–∞–ø—Ä–æ—Å + 1 Telegram –∑–∞–ø—Ä–æ—Å
//
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫:
//   - –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ Redis –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
//   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
func (d *QuestionDispatcher) worker(userID int64, wg *sync.WaitGroup) {
	defer wg.Done()

	log.Printf("%d –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å", userID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–∂–∏–¥–∞–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∞
	waiting, err := d.cache.GetUserWaiting(d.ctx, userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ waiting –∏–∑ Redis –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userID, err)
		return
	}

	if waiting {
		log.Printf("%d –∂–¥–µ–º –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏—Ç", userID)
		return
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤–æ–ø—Ä–æ—Å–∞
	if err = d.cache.SetUserWaiting(d.ctx, userID, true); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ waiting –≤ Redis –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userID, err)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	if err = d.sendRandomQuestionForUser(userID); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %v", userID, err)
		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
		if err = d.cache.SetUserWaiting(d.ctx, userID, false); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ waiting –≤ Redis –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userID, err)
		}
	}
	log.Printf("%d –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∂–¥—ë–º –ø–æ–∫–∞ –æ—Ç–≤–µ—Ç–∏—Ç", userID)
}

// sendRandomQuestionForUser –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
//
// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
//   - userID: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
//
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
//   - error: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
//
// –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
//   - –ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –±–ª–∏–∂–∞–π—à–∏–π –≤–æ–ø—Ä–æ—Å —Å –æ—Ç–≤–µ—Ç–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
//   - –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º Markdown
//   - –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
//   - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API
//
// –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ~5-15 –º—Å
func (d *QuestionDispatcher) sendRandomQuestionForUser(userID int64) error {
	// –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	uq, err := d.domain.GetRandomNearestQuestionWithAnswer(d.ctx, userID)
	if err != nil {
		return err
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
	tag := escapeMarkdown(uq.GetQuestion().R.GetTag().Tag)
	questionText := escapeMarkdown(uq.GetQuestion().Question)

	// –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
	buttons := getQuestionButtons(uq, false)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	rec := &telebot.User{ID: userID}
	_, err = d.bot.Send(
		rec,
		tag+": "+questionText,
		telebot.ModeMarkdownV2,
		&telebot.ReplyMarkup{
			InlineKeyboard: buttons,
		},
	)

	return err
}

// viewAnswer —Å–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è/—Å–∫—Ä—ã—Ç–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
//
// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
//   - domain: –¥–æ–º–µ–Ω–Ω—ã–π —Å–ª–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
//   - showAnswer: —Ñ–ª–∞–≥ –ø–æ–∫–∞–∑–∞ –æ—Ç–≤–µ—Ç–∞ (true - –ø–æ–∫–∞–∑–∞—Ç—å, false - —Å–∫—Ä—ã—Ç—å)
//
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
//   - telebot.HandlerFunc: —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è Telegram –±–æ—Ç–∞
//
// –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
//   - –ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
//   - –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ
//   - –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –æ—Ç–≤–µ—Ç–æ–º –∏–ª–∏ –±–µ–∑ –Ω–µ–≥–æ
//   - –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
func viewAnswer(domain app.Apper, showAnswer bool) telebot.HandlerFunc {
	return func(ctx telebot.Context) error {
		// –ü–∞—Ä—Å–∏–º ID –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
		data := ctx.Data()
		qID, err := strconv.Atoi(data)
		if err != nil {
			return err
		}

		// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		uq, err := domain.GetUserQuestion(GetContext(ctx), GetUserFromContext(ctx).TGUserID, int64(qID))
		if err != nil {
			return err
		}

		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
		question := uq.GetQuestion().Question
		tag := uq.R.GetQuestion().R.GetTag().Tag
		answer := uq.R.GetQuestion().R.GetAnswers()[0]

		result := escapeMarkdown(tag) + ": " + escapeMarkdown(question)
		if showAnswer {
			result += "\n\n" + escapeMarkdown(answer.Answer)
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
		return ctx.Edit(
			result,
			telebot.ModeMarkdownV2,
			&telebot.ReplyMarkup{
				InlineKeyboard: getQuestionButtons(uq, showAnswer),
			},
		)
	}
}

// escapeMarkdown —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown V2 –¥–ª—è Telegram
//
// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
//   - text: –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
//
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
//   - string: —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
//
// –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã:
//
//	_ * [ ] ( ) ~ ` > # + - = | { } . !
func escapeMarkdown(text string) string {
	specialChars := []string{"_", "*", "[", "]", "(", ")", "~", "`", ">", "#", "+", "-", "=", "|", "{", "}", ".", "!"}
	for _, char := range specialChars {
		text = strings.ReplaceAll(text, char, "\\"+char)
	}
	return text
}

// nextQuestion —Å–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"
//
// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
//   - d: —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ QuestionDispatcher
//
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
//   - telebot.HandlerFunc: —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è Telegram –±–æ—Ç–∞
//
// –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
//   - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
//   - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –µ—â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
//   - –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤ Redis –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
//   - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func nextQuestion(d *QuestionDispatcher) telebot.HandlerFunc {
	return func(ctx telebot.Context) error {
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è callback
		if err := ctx.Send(MSG_NEXT_QUESTION); err != nil {
			return ctx.Respond(&telebot.CallbackResponse{Text: err.Error()})
		}

		user := GetUserFromContext(ctx)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
		t, err := d.domain.GetNearestTimeRepeat(GetContext(ctx), user.TGUserID)
		if err != nil {
			return ctx.Respond(&telebot.CallbackResponse{Text: err.Error()})
		}

		now := time.Now().UTC()
		if !now.After(t) {
			// –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –µ—â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
			duration := t.Sub(now)
			msg := fmt.Sprintf("‚è≥ –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑: %s", timeLeftMsg(duration))

			if err = ctx.Send(msg, telebot.ModeMarkdown); err != nil {
				return ctx.Respond(&telebot.CallbackResponse{Text: err.Error()})
			}
		}

		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
		if err = d.cache.SetUserWaiting(d.ctx, user.TGUserID, false); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ waiting –≤ Redis –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", user.TGUserID, err)
		}

		return nil
	}
}

// timeLeftMsg —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∫–ª–æ–Ω–µ–Ω–∏–µ–º
//
// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
//   - duration: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–∂–∏–¥–∞–Ω–∏—è
//
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
//   - string: –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
//
// –§–æ—Ä–º–∞—Ç—ã –≤—ã–≤–æ–¥–∞:
//   - "2 –¥–Ω—è 3 —á–∞—Å–∞ 25 –º–∏–Ω—É—Ç"
//   - "1 —á–∞—Å 5 –º–∏–Ω—É—Ç"
//   - "25 –º–∏–Ω—É—Ç"
//   - "–º–µ–Ω–µ–µ –º–∏–Ω—É—Ç—ã" –¥–ª—è duration < 1 –º–∏–Ω—É—Ç—ã
func timeLeftMsg(duration time.Duration) string {
	var timeParts []string

	// pluralize –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É —Å–ª–æ–≤–∞ –¥–ª—è —á–∏—Å–ª–∞
	pluralize := func(n int, forms []string) string {
		n = n % 100
		if n > 10 && n < 20 {
			return forms[2]
		}
		n = n % 10
		if n == 1 {
			return forms[0]
		}
		if n >= 2 && n <= 4 {
			return forms[1]
		}
		return forms[2]
	}

	// –†–∞–∑–±–∏–≤–∞–µ–º duration –Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ
	days := int(duration.Hours() / 24)
	hours := int(duration.Hours()) % 24
	minutes := int(duration.Minutes()) % 60

	// –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
	if days > 0 {
		timeParts = append(timeParts, fmt.Sprintf("%d %s", days, pluralize(days, []string{"–¥–µ–Ω—å", "–¥–Ω—è", "–¥–Ω–µ–π"})))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—ã –µ—Å–ª–∏ –µ—Å—Ç—å
	if hours > 0 {
		timeParts = append(timeParts, fmt.Sprintf("%d %s", hours, pluralize(hours, []string{"—á–∞—Å", "—á–∞—Å–∞", "—á–∞—Å–æ–≤"})))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω—É—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –¥–Ω–µ–π (–¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏)
	if minutes > 0 && days == 0 {
		timeParts = append(timeParts, fmt.Sprintf("%d %s", minutes, pluralize(minutes, []string{"–º–∏–Ω—É—Ç—É", "–º–∏–Ω—É—Ç—ã", "–º–∏–Ω—É—Ç"})))
	}

	// –°–æ–±–∏—Ä–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
	t := strings.Join(timeParts, " ")
	if t == "" {
		t = "–º–µ–Ω–µ–µ –º–∏–Ω—É—Ç—ã"
	}

	return t
}

// getQuestionButtons —Å–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–ø—Ä–æ—Å–æ–º
//
// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
//   - uq: –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
//   - showAnswer: —Ñ–ª–∞–≥ –ø–æ–∫–∞–∑–∞ –æ—Ç–≤–µ—Ç–∞ (–≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–∞)
//
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
//   - [][]telebot.InlineButton: –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫ –¥–ª—è Telegram –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
//
// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:
//
//	[ –ü–æ–∫–∞–∑–∞—Ç—å/–°–∫—Ä—ã—Ç—å –æ—Ç–≤–µ—Ç ]
//	[ –õ–ï–ì–ö–û    –°–õ–û–ñ–ù–û ]
//	[ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –£–¥–∞–ª–∏—Ç—å –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ]
func getQuestionButtons(uq *edu.UsersQuestion, showAnswer bool) [][]telebot.InlineButton {
	// –ö–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å–∞
	forgot := telebot.InlineButton{
		Unique: INLINE_FORGOT_HIGH_QUESTION,
		Text:   MSG_FORGOT,
		Data:   fmt.Sprintf("%d", uq.QuestionID),
	}

	easy := telebot.InlineButton{
		Unique: INLINE_REMEMBER_HIGH_QUESTION,
		Text:   MSG_REMEMBER,
		Data:   fmt.Sprintf("%d", uq.QuestionID),
	}

	// –ö–Ω–æ–ø–∫–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è (—Ä–∞–∑–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∏ –æ–±—É—á–∞—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤)
	label := BtnRepeat
	if uq.IsEdu {
		label = BtnRepeatEdu
	}

	repeatBtn := telebot.InlineButton{
		Unique: INLINE_BTN_REPEAT_QUESTION_AFTER_POLL_HIGH,
		Text:   label,
		Data:   fmt.Sprintf("%d", uq.QuestionID),
	}

	// –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
	deleteBtn := telebot.InlineButton{
		Unique: INLINE_BTN_DELETE_QUESTION_AFTER_POLL_HIGH,
		Text:   BtnDelete,
		Data:   fmt.Sprintf("%d", uq.QuestionID),
	}

	// –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
	editBtn := telebot.InlineButton{
		Unique: INLINE_EDIT_QUESTION,
		Text:   BtnEdit,
		Data:   fmt.Sprintf("%d", uq.QuestionID),
	}

	// –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –æ—Ç–≤–µ—Ç–∞ (–º–µ–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è)
	var answerBtn telebot.InlineButton
	if showAnswer {
		answerBtn = telebot.InlineButton{
			Unique: INLINE_TURN_ANSWER,
			Text:   "üìù –°–≤–µ—Ä–Ω—É—Ç—å –æ—Ç–≤–µ—Ç",
			Data:   fmt.Sprintf("%d", uq.QuestionID),
		}
	} else {
		answerBtn = telebot.InlineButton{
			Unique: INLINE_SHOW_ANSWER,
			Text:   BtnShowAnswer,
			Data:   fmt.Sprintf("%d", uq.QuestionID),
		}
	}

	// –°–æ–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Ç—Ä–∏ —Ä—è–¥–∞
	return [][]telebot.InlineButton{
		{answerBtn},                     // –†—è–¥ 1: –ö–Ω–æ–ø–∫–∞ –æ—Ç–≤–µ—Ç–∞
		{easy, forgot},                  // –†—è–¥ 2: –û—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
		{repeatBtn, deleteBtn, editBtn}, // –†—è–¥ 3: –î–µ–π—Å—Ç–≤–∏—è —Å –≤–æ–ø—Ä–æ—Å–æ–º
	}
}
