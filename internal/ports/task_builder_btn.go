package ports

import (
	"fmt"
	"gopkg.in/telebot.v3"
)

const (
	INLINE_REMEMBER_HIGH_TASK = "high_task"
	INLINE_FORGOT_HIGH_TASK   = "fogot_task"

	INLINE_NEXT_TASK = "next_task"

	INLINE_SKIP_TASK = "skip_task"
)

// TaskButtonsBuilder –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç fluent-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∑–∞–¥–∞—á.
// –ü–æ–∑–≤–æ–ª—è–µ—Ç –ª–µ–≥–∫–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏.
//
// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
//
//	keyboard := NewTaskButtonsBuilder().
//	    AddShowAnswer(questionID).
//	    AddDifficulty(questionID).
//	    AddNavigation(questionID).
//	    Build()
type TaskButtonsBuilder struct {
	buttons [][]telebot.InlineButton
}

// NewTaskButtonsBuilder —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∏–ª–¥–µ—Ä–∞ –∫–Ω–æ–ø–æ–∫ –∑–∞–¥–∞—á.
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∏–ª–¥–µ—Ä —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º –∫–Ω–æ–ø–æ–∫.
//
// Returns:
//   - *TaskButtonsBuilder: —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –Ω–æ–≤—ã–π –±–∏–ª–¥–µ—Ä –∫–Ω–æ–ø–æ–∫
func NewTaskButtonsBuilder() *TaskButtonsBuilder {
	return &TaskButtonsBuilder{
		buttons: make([][]telebot.InlineButton, 0),
	}
}

// AddShowAnswer –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞/—Ä–µ—à–µ–Ω–∏—è –∫ –≤–æ–ø—Ä–æ—Å—É.
// –°–æ–∑–¥–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä—è–¥ —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π "üìù –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç".
//
// Parameters:
//   - questionID: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç
//
// Returns:
//   - *TaskButtonsBuilder: —Ç–µ–∫—É—â–∏–π –±–∏–ª–¥–µ—Ä –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –≤—ã–∑–æ–≤–æ–≤
func (b *TaskButtonsBuilder) AddShowAnswer(questionID int64) *TaskButtonsBuilder {
	btn := telebot.InlineButton{
		Unique: INLINE_SHOW_ANSWER,
		Text:   "üìù –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç",
		Data:   fmt.Sprintf("%d", questionID),
	}
	b.buttons = append(b.buttons, []telebot.InlineButton{btn})
	return b
}

// AddDifficulty –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å–∞.
// –°–æ–∑–¥–∞–µ—Ç —Ä—è–¥ —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏:
//   - "‚úÖ" - –≤–æ–ø—Ä–æ—Å –±—ã–ª –ª–µ–≥–∫–∏–º
//   - "‚ùå" - –≤–æ–ø—Ä–æ—Å –±—ã–ª —Å–ª–æ–∂–Ω—ã–º
//
// Parameters:
//   - questionID: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
//
// Returns:
//   - *TaskButtonsBuilder: —Ç–µ–∫—É—â–∏–π –±–∏–ª–¥–µ—Ä –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –≤—ã–∑–æ–≤–æ–≤
func (b *TaskButtonsBuilder) AddDifficulty(questionID int64) *TaskButtonsBuilder {
	easy := telebot.InlineButton{
		Unique: INLINE_REMEMBER_HIGH_TASK,
		Text:   "‚úÖ",
		Data:   fmt.Sprintf("%d", questionID),
	}
	forgot := telebot.InlineButton{
		Unique: INLINE_FORGOT_HIGH_TASK,
		Text:   "‚ùå",
		Data:   fmt.Sprintf("%d", questionID),
	}
	b.buttons = append(b.buttons, []telebot.InlineButton{easy, forgot})
	return b
}

// AddNavigation –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏.
// –°–æ–∑–¥–∞–µ—Ç –¥–≤–∞ —Ä—è–¥–∞ –∫–Ω–æ–ø–æ–∫:
//   - –ü–µ—Ä–≤—ã–π —Ä—è–¥: "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è" - –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ
//   - –í—Ç–æ—Ä–æ–π —Ä—è–¥: "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –∏ "üîÅ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
//
// Parameters:
//   - qID: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–æ–∫
//
// Returns:
//   - *TaskButtonsBuilder: —Ç–µ–∫—É—â–∏–π –±–∏–ª–¥–µ—Ä –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –≤—ã–∑–æ–≤–æ–≤
func (b *TaskButtonsBuilder) AddNavigation(qID int64) *TaskButtonsBuilder {
	nextTaskBtn := telebot.InlineButton{
		Unique: INLINE_NEXT_TASK,
		Text:   "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è",
		Data:   fmt.Sprintf("%d", qID),
	}
	skipTaskBtn := telebot.InlineButton{
		Unique: INLINE_SKIP_TASK,
		Text:   "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
		Data:   fmt.Sprintf("%d", qID),
	}
	continueQuestionsBtn := telebot.InlineButton{
		Unique: BTN_NEXT_QUESTION,
		Text:   BTN_NEXT_QUESTION,
		Data:   fmt.Sprintf("%d", qID),
	}
	b.buttons = append(b.buttons, []telebot.InlineButton{nextTaskBtn})
	b.buttons = append(b.buttons, []telebot.InlineButton{skipTaskBtn, continueQuestionsBtn})
	return b
}

// AddActions –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å –≤–æ–ø—Ä–æ—Å–æ–º.
// –°–æ–∑–¥–∞–µ—Ç —Ä—è–¥ —Å —Ç—Ä–µ–º—è –∫–Ω–æ–ø–∫–∞–º–∏:
//   - –ü–æ–≤—Ç–æ—Ä–∏—Ç—å (—Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –º–µ—Ç–∫–æ–π) - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
//   - –£–¥–∞–ª–∏—Ç—å - —É–¥–∞–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
//   - ‚úèÔ∏è - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
//
// Parameters:
//   - qID: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
//   - label: –º–µ—Ç–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–≤—Ç–æ—Ä–∞ (–æ–±—ã—á–Ω–æ "üîî" –∏–ª–∏ "üí§")
//
// Returns:
//   - *TaskButtonsBuilder: —Ç–µ–∫—É—â–∏–π –±–∏–ª–¥–µ—Ä –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –≤—ã–∑–æ–≤–æ–≤
//
// Note:
//   - –ú–µ—Ç–∫–∞ "üîî" –≤–æ–ø—Ä–æ—Å –Ω–∞ –ø–∞—É–∑–∫–µ
//   - –ú–µ—Ç–∫–∞ "üí§" –≤–æ–ø—Ä–æ—Å –≤ –≤—ã–±–æ—Ä–∫–µ
func (b *TaskButtonsBuilder) AddActions(qID int64, label string) *TaskButtonsBuilder {
	repeatBtn := telebot.InlineButton{
		Unique: INLINE_BTN_REPEAT_QUESTION_AFTER_POLL_HIGH,
		Text:   label,
		Data:   fmt.Sprintf("%d", qID),
	}
	deleteBtn := telebot.InlineButton{
		Unique: INLINE_BTN_DELETE_QUESTION_AFTER_POLL_HIGH,
		Text:   INLINE_NAME_DELETE_AFTER_POLL,
		Data:   fmt.Sprintf("%d", qID),
	}
	editBtn := telebot.InlineButton{
		Unique: INLINE_EDIT_QUESTION,
		Text:   "‚úèÔ∏è",
		Data:   fmt.Sprintf("%d", qID),
	}
	b.buttons = append(b.buttons, []telebot.InlineButton{repeatBtn, deleteBtn, editBtn})
	return b
}

// AddCustomRow –¥–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫ –∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.
// –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫, –Ω–µ –æ—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏.
//
// Parameters:
//   - buttons: variadic –ø–∞—Ä–∞–º–µ—Ç—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ–¥–∏–Ω —Ä—è–¥
//
// Returns:
//   - *TaskButtonsBuilder: —Ç–µ–∫—É—â–∏–π –±–∏–ª–¥–µ—Ä –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –≤—ã–∑–æ–≤–æ–≤
//
// Example:
//
//	customBtn := telebot.InlineButton{Text: "Custom", Unique: "custom", Data: "data"}
//	builder.AddCustomRow(customBtn, anotherBtn)
func (b *TaskButtonsBuilder) AddCustomRow(buttons ...telebot.InlineButton) *TaskButtonsBuilder {
	if len(buttons) > 0 {
		b.buttons = append(b.buttons, buttons)
	}
	return b
}

// Build –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—É—é —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è Telegram.
// –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º –≤ —Ü–µ–ø–æ—á–∫–µ –≤—ã–∑–æ–≤–æ–≤ –±–∏–ª–¥–µ—Ä–∞.
//
// Returns:
//   - *telebot.ReplyMarkup: –≥–æ—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Å–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
//
// Note:
//   - –ü–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ Build() –±–∏–ª–¥–µ—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ
//   - –î–ª—è –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –Ω–æ–≤—ã–π –±–∏–ª–¥–µ—Ä —á–µ—Ä–µ–∑ NewTaskButtonsBuilder()
func (b *TaskButtonsBuilder) Build() *telebot.ReplyMarkup {
	return &telebot.ReplyMarkup{
		InlineKeyboard: b.buttons,
	}
}
