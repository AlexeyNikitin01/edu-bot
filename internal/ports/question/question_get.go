package question

import (
	"bot/internal/domain"
	"bot/internal/middleware"
	"context"
	"fmt"
	"github.com/pkg/errors"
	"gopkg.in/telebot.v3"
	"html"
	"log"
	"strconv"
	"strings"
	"time"
)

func QuestionByTag(ctx context.Context, data string, d domain.UseCases) telebot.HandlerFunc {
	return func(ctxBot telebot.Context) error {
		tag, tagPage, err := parsePageString(data)
		if err != nil {
			return err
		}
		userID := middleware.GetUserFromContext(ctxBot).TGUserID
		return showQuestionsPage(ctx, ctxBot, tag, 0, userID, d, tagPage)
	}
}

func showQuestionsPage(
	ctx context.Context, ctxBot telebot.Context, tag string, page int, userID int64, d domain.UseCases, tagPage int,
) error {
	// –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
	questions, totalCount, err := d.GetAllQuestionsWithPagination(ctx, userID, tag, QuestionsPerPage, page)
	if err != nil {
		return err
	}

	// –°–æ–∑–¥–∞–µ–º –±–∏–ª–¥–µ—Ä —Å –æ–ø—Ü–∏—è–º–∏
	builder := NewQuestionButtonBuilder(
		WithQuestions(questions),
		WithTotalCount(totalCount),
		WithPage(page),
		WithTag(tag),
		WithTagPage(tagPage),
	)

	// –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –±–∏–ª–¥–µ—Ä–∞
	message, keyboard := builder.BuildQuestionsPage()

	if ctxBot.Callback() != nil {
		return ctxBot.Edit(message, &telebot.ReplyMarkup{
			InlineKeyboard: keyboard,
		})
	}

	return ctxBot.Send(message, &telebot.ReplyMarkup{
		InlineKeyboard: keyboard,
	})
}

// IsRepeat –≤—ã–±–æ—Ä —É—á–∏—Ç—å –∏–ª–∏ –Ω–µ —É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å.
func IsRepeat(ctx context.Context, d domain.UseCases) telebot.HandlerFunc {
	return func(ctxBot telebot.Context) error {
		userID := middleware.GetUserFromContext(ctxBot).TGUserID

		// –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ callback: "questionID_page_tag"
		parts := strings.Split(ctxBot.Data(), "_")
		if len(parts) < 3 {
			return errors.New("invalid command")
		}

		questionID, err := strconv.Atoi(parts[0])
		if err != nil {
			return err
		}

		page, err := strconv.Atoi(parts[1])
		if err != nil {
			return err
		}

		tag := strings.Join(parts[2:], "_")

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ–ø—Ä–æ—Å–∞
		if err = d.UpdateIsEduUserQuestion(ctx, userID, int64(questionID)); err != nil {
			return err
		}

		// –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
		return showQuestionsPage(ctx, ctxBot, tag, page, userID, d, 0)
	}
}

// HandlePageNavigation –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
func HandlePageNavigation(ctx context.Context, d domain.UseCases) telebot.HandlerFunc {
	return func(ctxBot telebot.Context) error {
		userID := middleware.GetUserFromContext(ctxBot).TGUserID
		page, tag, tagPage, err := parsePageAndTag(ctxBot.Data())
		if err != nil {
			return err
		}
		return showQuestionsPage(ctx, ctxBot, tag, page, userID, d, tagPage)
	}
}

// parsePageAndTag –ø–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ callback'–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–Ω–æ–º–µ—Ä_—Ç–µ–≥_—Å—Ç—Ä–∞–Ω–∏—Ü–∞–¢–µ–≥–∞" –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —Ç–µ–≥ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–µ–≥–∞
func parsePageAndTag(data string) (int, string, int, error) {
	dataParts := strings.Split(data, "_")
	if len(dataParts) != 3 {
		return 0, "", 0, fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: –æ–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç '–Ω–æ–º–µ—Ä_—Ç–µ–≥_—Å—Ç—Ä–∞–Ω–∏—Ü–∞–¢–µ–≥–∞'")
	}

	// –ü–∞—Ä—Å–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	page, err := strconv.Atoi(dataParts[0])
	if err != nil {
		return 0, "", 0, fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã: %v", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥
	tag := dataParts[1]
	if tag == "" {
		return 0, "", 0, fmt.Errorf("–Ω–µ —É–∫–∞–∑–∞–Ω —Ç–µ–≥")
	}

	// –ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–µ–≥–∞
	tagPage, err := strconv.Atoi(dataParts[2])
	if err != nil {
		return 0, "", 0, fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–µ–≥–∞: %v", err)
	}

	return page, tag, tagPage, nil
}

func GetForUpdate(ctx context.Context, domain domain.UseCases) telebot.HandlerFunc {
	return func(ctxBot telebot.Context) error {
		qID := ctxBot.Data()
		id, err := strconv.Atoi(qID)
		if err != nil {
			return err
		}
		q, err := domain.GetQuestionAnswers(ctx, int64(id))
		if err != nil {
			return err
		}

		var btns [][]telebot.InlineButton

		editQuestion := telebot.InlineButton{
			Unique: INLINE_EDIT_NAME_QUESTION,
			Text:   "–≤–æ–ø—Ä–æ—Å: " + q.Question,
			Data:   fmt.Sprintf("%d", id),
		}

		editTag := telebot.InlineButton{
			Unique: INLINE_EDIT_NAME_TAG_QUESTION,
			Text:   "—Ç—ç–≥: " + q.R.GetTag().Tag,
			Data:   fmt.Sprintf("%d", id),
		}

		btns = append(btns, []telebot.InlineButton{editQuestion})
		btns = append(btns, []telebot.InlineButton{editTag})

		for _, a := range q.R.GetAnswers() {
			answer := telebot.InlineButton{
				Unique: INLINE_EDIT_ANSWER_QUESTION,
				Text:   "–æ—Ç–≤–µ—Ç: " + a.Answer,
				Data:   fmt.Sprintf("%d", a.ID),
			}
			btns = append(btns, []telebot.InlineButton{answer})
		}

		return ctxBot.Send("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ: ", &telebot.ReplyMarkup{
			InlineKeyboard: btns,
		})
	}
}

// ShowCurrentValue –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π —Å—É—â–Ω–æ—Å—Ç–∏
func ShowCurrentValue(ctx context.Context, d domain.UseCases) telebot.HandlerFunc {
	return func(ctxBot telebot.Context) error {
		userID := middleware.GetUserFromContext(ctxBot).TGUserID

		draft, err := d.GetDraftQuestion(ctx, userID)
		if err != nil {
			return err
		}

		if draft == nil {
			return err
		}

		strID := ctxBot.Data()
		id, err := strconv.Atoi(strID)
		if err != nil {
			return err
		}

		var currentValue string
		var entityType string

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∞—è —Å—É—â–Ω–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –∏ –ø–æ–ª—É—á–∞–µ–º –µ–µ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
		switch {
		case draft.TagID == int64(id):
			// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥
			tag, err := d.GetTagByID(ctx, int64(id))
			if err != nil {
				return ctxBot.Send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–≥")
			}
			currentValue = tag.Tag
			entityType = "—Ç–µ–≥"

		case draft.QuestionIDByName == int64(id):
			// –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å
			question, err := d.GetQuestionAnswers(ctx, int64(id))
			if err != nil {
				return ctxBot.Send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å")
			}
			currentValue = question.Question
			entityType = "–≤–æ–ø—Ä–æ—Å"

		case draft.QuestionIDByTag == int64(id):
			// –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–≥–∞
			q, err := d.GetQuestionAnswers(ctx, int64(id))
			if err != nil {
				return ctxBot.Send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å")
			}
			tag, err := d.GetTagByID(ctx, q.TagID)
			if err != nil {
				currentValue = "–¢–µ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
			} else {
				currentValue = tag.Tag
			}
			entityType = "—Ç–µ–≥ –≤–æ–ø—Ä–æ—Å–∞"

		case draft.AnswerID == int64(id):
			// –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
			answer, err := d.GetAnswerByID(ctx, int64(id))
			if err != nil {
				return ctxBot.Send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–≤–µ—Ç")
			}
			currentValue = answer.Answer
			entityType = "–æ—Ç–≤–µ—Ç"

		default:
			return ctxBot.Send("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—É—â–Ω–æ—Å—Ç—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
		}

		message := fmt.Sprintf("<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:</b>\n\n üìã –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ %s:\n\n<code>%s</code>üí°",
			entityType,
			html.EscapeString(currentValue))

		// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–°–≤–µ—Ä–Ω—É—Ç—å"
		menu := &telebot.ReplyMarkup{}
		btnCollapse := menu.Data("üìÅ –°–≤–µ—Ä–Ω—É—Ç—å", INLINE_COLLAPSE_VALUE, strID)
		menu.Inline(menu.Row(btnCollapse))

		// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è –∫–Ω–æ–ø–∫—É –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ
		if ctxBot.Callback() != nil {
			return ctxBot.Edit(message, menu, telebot.ModeHTML)
		}

		return ctxBot.Send(message, menu, telebot.ModeHTML)
	}
}

// CollapseValue —Å–∫—Ä—ã–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
func CollapseValue(ctx context.Context, domain domain.UseCases) telebot.HandlerFunc {
	return func(ctx telebot.Context) error {
		strID := ctx.Data()

		// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
		menu := &telebot.ReplyMarkup{}
		btnShowCurrent := menu.Data("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", INLINE_SHOW_CURRENT_VALUE, strID)
		menu.Inline(menu.Row(btnShowCurrent))

		// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞—è –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		return ctx.Edit("–î–µ–π—Å—Ç–≤–∏–µ", menu, telebot.ModeHTML)
	}
}

func ViewAnswer(ctx context.Context, d domain.UseCases, showAnswer bool) telebot.HandlerFunc {
	return func(ctxBot telebot.Context) error {
		// –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ callback: "questionID_page_tag"
		parts := strings.Split(ctxBot.Data(), "_")
		if len(parts) < 3 {
			return errors.New("invalid command")
		}

		questionID, err := strconv.Atoi(parts[0])
		if err != nil {
			return err
		}

		page, err := strconv.Atoi(parts[1])
		if err != nil {
			return err
		}

		tag := strings.Join(parts[2:], "_")

		userID := middleware.GetUserFromContext(ctxBot).TGUserID

		uq, err := d.GetUserQuestion(ctx, userID, int64(questionID))
		if err != nil {
			return err
		}

		question := uq.GetQuestion().Question
		tagName := uq.R.GetQuestion().R.GetTag().Tag
		answer := uq.R.GetQuestion().R.GetAnswers()[0]

		result := EscapeMarkdown(tagName) + ": " + EscapeMarkdown(question)
		if showAnswer {
			result += "\n\n" + EscapeMarkdown(answer.Answer)
		}

		// –°–æ–∑–¥–∞–µ–º –±–∏–ª–¥–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ—Ç–≤–µ—Ç–∞ —Å –æ–ø—Ü–∏—è–º–∏
		builder := NewQuestionButtonBuilder(
			WithPage(page),
			WithTag(tag),
		)

		return ctxBot.Edit(
			result,
			telebot.ModeMarkdownV2,
			&telebot.ReplyMarkup{
				InlineKeyboard: builder.BuildFullKeyboard(uq, showAnswer),
			},
		)
	}
}

func NextQuestion(ctx context.Context, d domain.UseCases) telebot.HandlerFunc {
	return func(ctxBot telebot.Context) error {
		if err := ctxBot.Send(MSG_NEXT_QUESTION); err != nil {
			return err
		}

		userID := middleware.GetUserFromContext(ctxBot).TGUserID

		t, err := d.GetNearestTimeRepeat(ctx, userID)
		if err != nil {
			return ctxBot.Respond(&telebot.CallbackResponse{Text: err.Error()})
		}

		now := time.Now().UTC()
		if !now.After(t) {
			duration := t.Sub(now)
			msg := fmt.Sprintf("‚è≥ –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑: %s", timeLeftMsg(duration))

			if err = ctxBot.Send(msg, telebot.ModeMarkdown); err != nil {
				return ctxBot.Respond(&telebot.CallbackResponse{Text: err.Error()})
			}
		}

		if err = d.SetUserWaiting(ctx, userID, false); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ waiting –≤ Redis –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userID, err)
		}

		return nil
	}
}
