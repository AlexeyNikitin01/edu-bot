package question

import (
	"bot/internal/domain"
	"bot/internal/middleware"
	"bot/internal/repo/edu"
	"context"
	"fmt"
	"github.com/pkg/errors"
	"gopkg.in/telebot.v3"
	"html"
	"log"
	"strconv"
	"strings"
	"time"
)

const (
	MSG_LIST_QUESTION = "–í–û–ü–†–û–°–´: "
	MSG_LIST_TAGS     = "–¢–≠–ì–ò: "
	MSG_EMPTY         = "–£ –≤–∞—Å –Ω–µ—Ç —Ç—ç–≥–æ–≤"
	MSG_BACK_TAGS     = "–ù–ê–ó–ê–î –ö –¢–≠–ì–ê–ú"

	QuestionsPerPage = 10 // –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞

)

func ShowRepeatTagList(ctx context.Context, domain domain.UseCases) telebot.HandlerFunc {
	return func(ctxBot telebot.Context) error {

		tagButtons, err := getButtonsTags(ctx, ctxBot, domain)
		if err != nil {
			return err
		}

		return ctxBot.Send(MSG_LIST_TAGS, &telebot.ReplyMarkup{
			InlineKeyboard: tagButtons,
		})
	}
}

func BackTags(ctx context.Context, d domain.UseCases) telebot.HandlerFunc {
	return func(ctxBot telebot.Context) error {

		tagButtons, err := getButtonsTags(ctx, ctxBot, d)
		if err != nil {
			return err
		}

		return ctxBot.Edit(MSG_LIST_TAGS, &telebot.ReplyMarkup{
			InlineKeyboard: tagButtons,
		})
	}
}

func getButtonsTags(ctx context.Context, ctxBot telebot.Context, d domain.UseCases) ([][]telebot.InlineButton, error) {
	userID := middleware.GetUserFromContext(ctxBot).TGUserID

	tags, err := d.GetUniqueTags(ctx, userID)
	if err != nil {
		return nil, err
	}

	if len(tags) == 0 {
		return nil, nil
	}

	var tagButtons [][]telebot.InlineButton

	// todo –∫–Ω–æ–ø–∫–∏
	for _, tag := range tags {
		tagBtn := telebot.InlineButton{
			Unique: INLINE_BTN_QUESTION_BY_TAG,
			Text:   tag.Tag,
			Data:   tag.Tag,
		}
		deleteBtn := telebot.InlineButton{
			Unique: INLINE_BTN_DELETE_QUESTIONS_BY_TAG,
			Text:   INLINE_NAME_DELETE,
			Data:   tag.Tag,
		}
		editBtn := telebot.InlineButton{
			Unique: INLINE_EDIT_TAG,
			Text:   "‚úèÔ∏è",
			Data:   fmt.Sprintf("%d", tag.ID),
		}

		label := "üîî"
		if !tag.IsPause {
			label = "üí§"
		}

		pauseTag := telebot.InlineButton{
			Unique: INLINE_PAUSE_TAG,
			Text:   label,
			Data:   fmt.Sprintf("%d", tag.ID),
		}

		tagButtons = append(tagButtons, []telebot.InlineButton{tagBtn, deleteBtn, editBtn, pauseTag})
	}

	return tagButtons, nil
}

func QuestionByTag(ctx context.Context, tag string, d domain.UseCases) telebot.HandlerFunc {
	return func(ctxBot telebot.Context) error {
		userID := middleware.GetUserFromContext(ctxBot).TGUserID
		return showQuestionsPage(ctx, ctxBot, tag, 0, userID, d)
	}
}

func showQuestionsPage(
	ctx context.Context, ctxBot telebot.Context, tag string, page int, userID int64, d domain.UseCases,
) error {
	return ctxBot.Edit(fmt.Sprintf("%s %s (–°—Ç—Ä. %d)", tag, MSG_LIST_QUESTION, page+1), &telebot.ReplyMarkup{
		InlineKeyboard: getQuestionBtns(ctx, ctxBot, d, tag, page, userID),
	})
}

// IsRepeat –≤—ã–±–æ—Ä —É—á–∏—Ç—å –∏–ª–∏ –Ω–µ —É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å.
func IsRepeat(ctx context.Context, d domain.UseCases) telebot.HandlerFunc {
	return func(ctxBot telebot.Context) error {
		userID := middleware.GetUserFromContext(ctxBot).TGUserID

		// –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ callback: "questionID_page_tag"
		parts := strings.Split(ctxBot.Data(), "_")
		if len(parts) < 3 {
			return errors.New("invalid command")
		}

		questionID, err := strconv.Atoi(parts[0])
		if err != nil {
			return err
		}

		page, err := strconv.Atoi(parts[1])
		if err != nil {
			return err
		}

		tag := strings.Join(parts[2:], "_")

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ–ø—Ä–æ—Å–∞
		if err = d.UpdateIsEduUserQuestion(ctx, userID, int64(questionID)); err != nil {
			return err
		}

		// –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
		return ctxBot.Edit(&telebot.ReplyMarkup{
			InlineKeyboard: getQuestionBtns(ctx, ctxBot, d, tag, page, userID),
		})
	}
}

func getQuestionBtns(
	ctx context.Context, ctxBot telebot.Context, d domain.UseCases, tag string, page int, userID int64,
) [][]telebot.InlineButton {
	qs, err := d.GetAllQuestions(ctx, userID, tag)
	if err != nil || len(qs) == 0 {
		return nil
	}

	totalPages := (len(qs) + QuestionsPerPage - 1) / QuestionsPerPage
	if page >= totalPages {
		page = totalPages - 1
	}
	if page < 0 {
		page = 0
	}

	start := page * QuestionsPerPage
	end := start + QuestionsPerPage
	if end > len(qs) {
		end = len(qs)
	}
	pageQuestions := qs[start:end]

	// –ü–æ–ª—É—á–∞–µ–º UsersQuestion –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
	userQuestions := make(map[int64]*edu.UsersQuestion)
	for _, q := range pageQuestions {
		uq, err := d.GetUserQuestion(ctx, userID, q.ID)
		if err == nil {
			userQuestions[q.ID] = uq
		}
	}

	builder := NewQuestionButtonBuilder()

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
	btns := builder.BuildQuestionsKeyboard(pageQuestions, userQuestions, page, tag)

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
	if totalPages > 1 {
		paginationRow := builder.BuildPaginationButtons(page, totalPages, tag)
		if len(paginationRow) > 0 {
			btns = append(btns, paginationRow)
		}
	}

	return btns
}

func GetForUpdate(ctx context.Context, domain domain.UseCases) telebot.HandlerFunc {
	return func(ctxBot telebot.Context) error {
		qID := ctxBot.Data()
		id, err := strconv.Atoi(qID)
		if err != nil {
			return err
		}
		q, err := domain.GetQuestionAnswers(ctx, int64(id))
		if err != nil {
			return err
		}

		var btns [][]telebot.InlineButton

		editQuestion := telebot.InlineButton{
			Unique: INLINE_EDIT_NAME_QUESTION,
			Text:   "–≤–æ–ø—Ä–æ—Å: " + q.Question,
			Data:   fmt.Sprintf("%d", id),
		}

		editTag := telebot.InlineButton{
			Unique: INLINE_EDIT_NAME_TAG_QUESTION,
			Text:   "—Ç—ç–≥: " + q.R.GetTag().Tag,
			Data:   fmt.Sprintf("%d", id),
		}

		btns = append(btns, []telebot.InlineButton{editQuestion})
		btns = append(btns, []telebot.InlineButton{editTag})

		for _, a := range q.R.GetAnswers() {
			answer := telebot.InlineButton{
				Unique: INLINE_EDIT_ANSWER_QUESTION,
				Text:   "–æ—Ç–≤–µ—Ç: " + a.Answer,
				Data:   fmt.Sprintf("%d", a.ID),
			}
			btns = append(btns, []telebot.InlineButton{answer})
		}

		return ctxBot.Send("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ: ", &telebot.ReplyMarkup{
			InlineKeyboard: btns,
		})
	}
}

// HandlePageNavigation –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
func HandlePageNavigation(ctx context.Context, ctxBot telebot.Context, pageOffset int, d domain.UseCases) error {
	userID := middleware.GetUserFromContext(ctxBot).TGUserID
	page, tag, err := parsePageAndTag(ctxBot.Data())
	if err != nil {
		return err
	}
	return showQuestionsPage(ctx, ctxBot, tag, page+pageOffset, userID, d)
}

// parsePageAndTag –ø–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ callback'–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Ç–µ–≥
func parsePageAndTag(data string) (int, string, error) {
	dataParts := strings.Split(data, "_")
	if len(dataParts) != 2 {
		return 0, "", fmt.Errorf("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
	}

	page, err := strconv.Atoi(dataParts[0])
	if err != nil {
		return 0, "", fmt.Errorf("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
	}

	tag := dataParts[1]
	if tag == "" {
		return 0, "", fmt.Errorf("–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω —Ç–µ–≥")
	}

	return page, tag, nil
}

// ShowCurrentValue –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π —Å—É—â–Ω–æ—Å—Ç–∏
func ShowCurrentValue(ctx context.Context, d domain.UseCases) telebot.HandlerFunc {
	return func(ctxBot telebot.Context) error {
		userID := middleware.GetUserFromContext(ctxBot).TGUserID

		draft, err := d.GetDraftQuestion(ctx, userID)
		if err != nil {
			return err
		}

		if draft == nil {
			return err
		}

		strID := ctxBot.Data()
		id, err := strconv.Atoi(strID)
		if err != nil {
			return err
		}

		var currentValue string
		var entityType string

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∞—è —Å—É—â–Ω–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –∏ –ø–æ–ª—É—á–∞–µ–º –µ–µ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
		switch {
		case draft.TagID == int64(id):
			// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥
			tag, err := d.GetTagByID(ctx, int64(id))
			if err != nil {
				return ctxBot.Send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–≥")
			}
			currentValue = tag.Tag
			entityType = "—Ç–µ–≥"

		case draft.QuestionIDByName == int64(id):
			// –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å
			question, err := d.GetQuestionAnswers(ctx, int64(id))
			if err != nil {
				return ctxBot.Send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å")
			}
			currentValue = question.Question
			entityType = "–≤–æ–ø—Ä–æ—Å"

		case draft.QuestionIDByTag == int64(id):
			// –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–≥–∞
			q, err := d.GetQuestionAnswers(ctx, int64(id))
			if err != nil {
				return ctxBot.Send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å")
			}
			tag, err := d.GetTagByID(ctx, q.TagID)
			if err != nil {
				currentValue = "–¢–µ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
			} else {
				currentValue = tag.Tag
			}
			entityType = "—Ç–µ–≥ –≤–æ–ø—Ä–æ—Å–∞"

		case draft.AnswerID == int64(id):
			// –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
			answer, err := d.GetAnswerByID(ctx, int64(id))
			if err != nil {
				return ctxBot.Send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–≤–µ—Ç")
			}
			currentValue = answer.Answer
			entityType = "–æ—Ç–≤–µ—Ç"

		default:
			return ctxBot.Send("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—É—â–Ω–æ—Å—Ç—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
		}

		message := fmt.Sprintf("<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:</b>\n\n üìã –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ %s:\n\n<code>%s</code>üí°",
			entityType,
			html.EscapeString(currentValue))

		// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–°–≤–µ—Ä–Ω—É—Ç—å"
		menu := &telebot.ReplyMarkup{}
		btnCollapse := menu.Data("üìÅ –°–≤–µ—Ä–Ω—É—Ç—å", INLINE_COLLAPSE_VALUE, strID)
		menu.Inline(menu.Row(btnCollapse))

		// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è –∫–Ω–æ–ø–∫—É –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ
		if ctxBot.Callback() != nil {
			return ctxBot.Edit(message, menu, telebot.ModeHTML)
		}

		return ctxBot.Send(message, menu, telebot.ModeHTML)
	}
}

// CollapseValue —Å–∫—Ä—ã–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
func CollapseValue(ctx context.Context, domain domain.UseCases) telebot.HandlerFunc {
	return func(ctx telebot.Context) error {
		strID := ctx.Data()

		// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
		menu := &telebot.ReplyMarkup{}
		btnShowCurrent := menu.Data("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", INLINE_SHOW_CURRENT_VALUE, strID)
		menu.Inline(menu.Row(btnShowCurrent))

		// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞—è –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		return ctx.Edit(MSG_EDIT, menu, telebot.ModeHTML)
	}
}

func ViewAnswer(ctx context.Context, d domain.UseCases, showAnswer bool) telebot.HandlerFunc {
	return func(ctxBot telebot.Context) error {
		data := ctxBot.Data()
		qID, err := strconv.Atoi(data)
		if err != nil {
			return err
		}

		userID := middleware.GetUserFromContext(ctxBot).TGUserID

		uq, err := d.GetUserQuestion(ctx, userID, int64(qID))
		if err != nil {
			return err
		}

		question := uq.GetQuestion().Question
		tag := uq.R.GetQuestion().R.GetTag().Tag
		answer := uq.R.GetQuestion().R.GetAnswers()[0]

		result := EscapeMarkdown(tag) + ": " + EscapeMarkdown(question)
		if showAnswer {
			result += "\n\n" + EscapeMarkdown(answer.Answer)
		}

		return ctxBot.Edit(
			result,
			telebot.ModeMarkdownV2,
			&telebot.ReplyMarkup{
				InlineKeyboard: NewQuestionButtonBuilder().BuildFullKeyboard(uq, showAnswer),
			},
		)
	}
}

func NextQuestion(ctx context.Context, d domain.UseCases) telebot.HandlerFunc {
	return func(ctxBot telebot.Context) error {
		if err := ctxBot.Send(MSG_NEXT_QUESTION); err != nil {
			return err
		}

		userID := middleware.GetUserFromContext(ctxBot).TGUserID

		t, err := d.GetNearestTimeRepeat(ctx, userID)
		if err != nil {
			return ctxBot.Respond(&telebot.CallbackResponse{Text: err.Error()})
		}

		now := time.Now().UTC()
		if !now.After(t) {
			duration := t.Sub(now)
			msg := fmt.Sprintf("‚è≥ –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑: %s", timeLeftMsg(duration))

			if err = ctxBot.Send(msg, telebot.ModeMarkdown); err != nil {
				return ctxBot.Respond(&telebot.CallbackResponse{Text: err.Error()})
			}
		}

		if err = d.SetUserWaiting(ctx, userID, false); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ waiting –≤ Redis –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userID, err)
		}

		return nil
	}
}
