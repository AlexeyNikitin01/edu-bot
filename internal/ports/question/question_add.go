package question

import (
	"bot/internal/middleware"
	"bot/internal/repo/dto"
	"context"
	"errors"
	"strconv"
	"strings"

	"gopkg.in/telebot.v3"

	"bot/internal/domain"
	"bot/internal/repo/edu"
)

// –û—à–∏–±–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
var (
	ErrGetTag    = errors.New("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—ç–≥–æ–≤")
	ErrSave      = errors.New("–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å")
	ErrSaveDraft = errors.New("–æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞")
	ErrGetDraft  = errors.New("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞")
)

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
const (
	MSG_ADD_TAG                        = "üè∑ –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç—ç–≥ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã: "
	MSG_ADD_QUESTION                   = "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
	MSG_ADD_CORRECT_ANSWER             = "‚úç‚úÖ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã: "
	MSG_CANCEL                         = "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µüëä!"
	MSG_SUCCESS                        = "‚úÖ –£—Å–ø–µ—Ö!"
	MSG_EDIT                           = "<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:</b>\n\n "
	MSG_SUCCESS_UPDATE_TAG             = "–¢—ç–≥ –æ–±–Ω–æ–≤–ª–µ–Ω"
	MSG_SUCCESS_UPDATE_NAME_QUESTION   = "–í–æ–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω"
	MSG_SUCCESS_UPDATE_ANSWER          = "–û—Ç–≤–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω"
	MSG_EDIT_TAG_BY_QUESTION           = "–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç—ç–≥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã: "
	MSG_SUCCESS_UPDATE_TAG_BY_QUESTION = "–¢—ç–≥ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω"
)

func SetEdit(ctx context.Context, field string, d domain.UseCases) telebot.HandlerFunc {
	return func(ctxBot telebot.Context) (err error) {
		strID := ctxBot.Data()
		id, err := strconv.Atoi(strID)
		if err != nil {
			return err
		}

		userID := middleware.GetUserFromContext(ctxBot).TGUserID

		draft, err := d.GetDraftQuestion(ctx, userID)
		if err != nil {
			return err
		}

		if draft == nil {
			draft = &dto.QuestionDraft{Step: 1}
		}

		switch field {
		case edu.TableNames.Tags:
			draft.TagID = int64(id)
		case edu.QuestionTableColumns.Question:
			draft.QuestionIDByName = int64(id)
		case edu.QuestionTableColumns.TagID:
			draft.QuestionIDByTag = int64(id)
			if err = getTags(ctx, ctxBot, userID, d); err != nil {
				return err
			}
			return ctxBot.Send(MSG_EDIT_TAG_BY_QUESTION)
		case edu.AnswerTableColumns.Answer:
			draft.AnswerID = int64(id)
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –≤ –∫—ç—à
		if err = d.SetDraftQuestion(ctx, userID, draft); err != nil {
			return err
		}

		menu := &telebot.ReplyMarkup{}
		btnShowCurrent := menu.Data("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", INLINE_SHOW_CURRENT_VALUE, strID)
		menu.Inline(menu.Row(btnShowCurrent))

		return ctxBot.Send(MSG_EDIT, menu, telebot.ModeHTML)
	}
}

// UpsertUserQuestion –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
func UpsertUserQuestion(ctx context.Context, d domain.UseCases) telebot.HandlerFunc {
	return func(ctxBot telebot.Context) (err error) {
		msg := strings.TrimSpace(ctxBot.Message().Text)
		userID := middleware.GetUserFromContext(ctxBot).TGUserID

		draft, err := d.GetDraftQuestion(ctx, userID)
		if err != nil {
			return err
		}

		if draft == nil {
			return initNewDraft(ctx, ctxBot, userID, d)
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è
		if msg == CMD_CANCEL {
			return cancelDraft(ctx, ctxBot, userID, d)
		}

		// –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
		if draft.TagID != 0 || draft.QuestionIDByName != 0 || draft.AnswerID != 0 || draft.QuestionIDByTag != 0 {
			return updateUserQuestion(ctx, ctxBot, draft, msg, userID, d)
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
		return createUserQuestion(ctx, ctxBot, draft, msg, userID, d)
	}
}

func initNewDraft(ctx context.Context, ctxBot telebot.Context, userID int64, d domain.UseCases) error {
	draft := &dto.QuestionDraft{Step: 1}
	if err := d.SetDraftQuestion(ctx, userID, draft); err != nil {
		return err
	}
	if err := ctxBot.Send(MSG_LIST_TAGS); err != nil {
		return err
	}
	return getTags(ctx, ctxBot, userID, d)
}

func cancelDraft(ctx context.Context, ctxBot telebot.Context, userID int64, d domain.UseCases) error {
	if err := d.DeleteDraftQuestion(ctx, userID); err != nil {
		return err
	}
	return ctxBot.Send(MSG_CANCEL)
}

func updateUserQuestion(
	ctx context.Context, ctxBot telebot.Context, draft *dto.QuestionDraft, msg string, userID int64, d domain.UseCases,
) error {
	switch {
	case draft.TagID != 0:
		return updateTag(ctx, ctxBot, draft, msg, userID, d)
	case draft.QuestionIDByName != 0:
		return updateQuestionName(ctx, ctxBot, draft, msg, userID, d)
	case draft.AnswerID != 0:
		return updateAnswer(ctx, ctxBot, draft, msg, userID, d)
	case draft.QuestionIDByTag != 0:
		return updateTagByQuestion(ctx, ctxBot, draft, msg, userID, d)
	}
	return nil
}

// updateTag –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–µ–≥–∞
func updateTag(
	ctx context.Context, ctxBot telebot.Context, draft *dto.QuestionDraft, msg string, userID int64, d domain.UseCases,
) error {
	if err := d.UpdateTag(ctx, draft.TagID, msg); err != nil {
		return err
	}
	if err := d.DeleteDraftQuestion(ctx, userID); err != nil {
		return err
	}
	return ctxBot.Send(MSG_SUCCESS_UPDATE_TAG)
}

// updateQuestionName –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
func updateQuestionName(
	ctx context.Context, ctxBot telebot.Context, draft *dto.QuestionDraft, msg string, userID int64, d domain.UseCases,
) error {
	if err := d.UpdateQuestionName(ctx, draft.QuestionIDByName, msg); err != nil {
		return err
	}
	if err := d.DeleteDraftQuestion(ctx, userID); err != nil {
		return err
	}
	return ctxBot.Send(MSG_SUCCESS_UPDATE_NAME_QUESTION)
}

// updateAnswer –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
func updateAnswer(
	ctx context.Context, ctxBot telebot.Context, draft *dto.QuestionDraft, msg string, userID int64, d domain.UseCases,
) error {
	if err := d.UpdateAnswer(ctx, draft.AnswerID, msg); err != nil {
		return err
	}
	if err := d.DeleteDraftQuestion(ctx, userID); err != nil {
		return err
	}
	return ctxBot.Send(MSG_SUCCESS_UPDATE_ANSWER)
}

// updateTagByQuestion –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–≥ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–≥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ
func updateTagByQuestion(
	ctx context.Context, ctxBot telebot.Context, draft *dto.QuestionDraft, msg string, userID int64, d domain.UseCases,
) error {
	tag := ""

	if ctxBot.Callback() != nil {
		tag = ctxBot.Callback().Data
	} else if ctxBot.Message().Text != BTN_ADD_QUESTION && ctxBot.Message().Text != MSG_ADD_TAG {
		tag = ctxBot.Message().Text
	}

	if tag == "" {
		return nil
	}

	if err := d.UpdateTagByQuestion(ctx, draft.QuestionIDByTag, tag); err != nil {
		return err
	}
	if err := d.DeleteDraftQuestion(ctx, userID); err != nil {
		return err
	}
	return ctxBot.Send(MSG_SUCCESS_UPDATE_TAG_BY_QUESTION)
}

func createUserQuestion(
	ctx context.Context, ctxBot telebot.Context, draft *dto.QuestionDraft, msg string, userID int64, d domain.UseCases,
) error {
	switch draft.Step {
	case 1:
		return processTagSelection(ctx, ctxBot, draft, userID, d)
	case 2:
		return processQuestionInput(ctx, ctxBot, draft, userID, msg, d)
	case 3:
		return processCorrectAnswerInputAndSaveQuestion(ctx, ctxBot, draft, userID, msg, d)
	}
	return nil
}

func processTagSelection(
	ctx context.Context, ctxBot telebot.Context, draft *dto.QuestionDraft, userID int64, d domain.UseCases,
) error {
	tag := ""

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ callback
	if ctxBot.Callback() != nil {
		tag = ctxBot.Callback().Data
	} else if ctxBot.Message().Text != BTN_ADD_QUESTION && ctxBot.Message().Text != MSG_ADD_TAG {
		tag = ctxBot.Message().Text
	}

	// –ï—Å–ª–∏ —Ç–µ–≥ –Ω–µ –≤—ã–±—Ä–∞–Ω, –≤—ã—Ö–æ–¥–∏–º –±–µ–∑ –æ—à–∏–±–∫–∏
	if tag == "" {
		return nil
	}

	draft.Tag = tag
	draft.Step++

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫ –≤ –∫—ç—à
	if err := d.SetDraftQuestion(ctx, userID, draft); err != nil {
		return errors.Join(ErrSaveDraft, err)
	}

	return ctxBot.Send(MSG_ADD_QUESTION)
}

// processQuestionInput –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞
func processQuestionInput(
	ctx context.Context, ctxBot telebot.Context, draft *dto.QuestionDraft, userID int64, msg string, d domain.UseCases,
) error {
	draft.Question = msg
	draft.Step++

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫ –≤ –∫—ç—à
	if err := d.SetDraftQuestion(ctx, userID, draft); err != nil {
		return errors.Join(ErrSaveDraft, err)
	}

	return ctxBot.Send(MSG_ADD_CORRECT_ANSWER)
}

func processCorrectAnswerInputAndSaveQuestion(
	ctx context.Context, ctxBot telebot.Context, draft *dto.QuestionDraft, userID int64, msg string, d domain.UseCases,
) error {
	draft.Answers = append(draft.Answers, msg)

	// –£–¥–∞–ª—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ (–¥–∞–∂–µ –µ—Å–ª–∏ –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞)
	defer d.DeleteDraftQuestion(ctx, userID)

	if err := d.SaveQuestions(ctx, draft.Question, draft.Tag, draft.Answers, userID); err != nil {
		return err
	}

	return ctxBot.Send(MSG_SUCCESS)
}

func getTags(
	ctx context.Context, ctxBot telebot.Context, userID int64, d domain.UseCases) error {
	ts, err := d.GetUniqueTags(ctx, userID)
	if err != nil {
		return err
	}

	var btns [][]telebot.InlineButton

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ–≥–∞
	for _, t := range ts {
		btn := telebot.InlineButton{
			Unique: INLINE_BTN_TAGS,
			Text:   t.Tag,
			Data:   t.Tag,
		}
		btns = append(btns, []telebot.InlineButton{btn})
	}

	// –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–≥–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö —Å–ø–∏—Å–∫–æ–º
	if len(btns) != 0 {
		if err = ctxBot.Send(MSG_ADD_TAG, &telebot.ReplyMarkup{
			InlineKeyboard: btns,
		}); err != nil {
			return ctxBot.Send(errors.Join(ErrGetTag, err).Error())
		}
		return nil
	}

	// –ï—Å–ª–∏ —Ç–µ–≥–æ–≤ –Ω–µ—Ç, –ø—Ä–æ—Å–∏–º –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π
	return ctxBot.Send(MSG_ADD_TAG)
}
