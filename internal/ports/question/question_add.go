package question

import (
	"bot/internal/middleware"
	"bot/internal/ports/menu"
	"bot/internal/ports/tags"
	"bot/internal/repo/dto"
	"context"
	"strconv"
	"strings"

	"gopkg.in/telebot.v3"

	"bot/internal/domain"
	"bot/internal/repo/edu"
)

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
func sendWithoutKeyboard(ctxBot telebot.Context, message string, rows ...telebot.Row) error {
	m := &telebot.ReplyMarkup{RemoveKeyboard: true}
	if len(rows) != 0 {
		for _, i := range rows {
			m.Inline(i)
		}
		ctxBot.Delete()
		if err := ctxBot.Send("–î–µ–π—Å—Ç–≤–∏–µ: ", m); err != nil {
			return err
		}
		return ctxBot.Send(message, &telebot.ReplyMarkup{RemoveKeyboard: true})
	}

	return ctxBot.Send(message, m)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
func sendWithMainKeyboard(ctxBot telebot.Context, message string) error {
	return ctxBot.Send(message, menu.BtnsMenu())
}

func SetEdit(ctx context.Context, field string, d domain.UseCases) telebot.HandlerFunc {
	return func(ctxBot telebot.Context) (err error) {
		strID := ctxBot.Data()
		id, err := strconv.Atoi(strID)
		if err != nil {
			return err
		}

		userID := middleware.GetUserFromContext(ctxBot).TGUserID

		draft, err := d.GetDraftQuestion(ctx, userID)
		if err != nil {
			return err
		}

		if draft == nil {
			draft = &dto.QuestionDraft{Step: 1}
		}

		switch field {
		case edu.TableNames.Tags:
			draft.TagID = int64(id)
		case edu.QuestionTableColumns.Question:
			draft.QuestionIDByName = int64(id)
		case edu.QuestionTableColumns.TagID:
			draft.QuestionIDByTag = int64(id)
			// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–µ–≥–æ–≤ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
			return tags.ShowEditTagList(ctx, d)(ctxBot)
		case edu.AnswerTableColumns.Answer:
			draft.AnswerID = int64(id)
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –≤ –∫—ç—à
		if err = d.SetDraftQuestion(ctx, userID, draft); err != nil {
			return err
		}

		m := &telebot.ReplyMarkup{}
		btnShowCurrent := m.Data("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", INLINE_SHOW_CURRENT_VALUE, strID)

		return sendWithoutKeyboard(ctxBot, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:", m.Row(btnShowCurrent))
	}
}

// UpsertUserQuestion –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func UpsertUserQuestion(ctx context.Context, d domain.UseCases) telebot.HandlerFunc {
	return func(ctxBot telebot.Context) (err error) {
		msg := strings.TrimSpace(ctxBot.Message().Text)
		userID := middleware.GetUserFromContext(ctxBot).TGUserID

		draft, err := d.GetDraftQuestion(ctx, userID)
		if err != nil {
			return err
		}

		if draft == nil {
			return initNewDraft(ctx, ctxBot, userID, d)
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è
		if msg == CMD_CANCEL {
			return cancelDraft(ctx, ctxBot, userID, d)
		}

		// –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
		if draft.TagID != 0 || draft.QuestionIDByName != 0 || draft.AnswerID != 0 || draft.QuestionIDByTag != 0 {
			return updateUserQuestion(ctx, ctxBot, draft, msg, userID, d)
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
		return createUserQuestion(ctx, ctxBot, draft, msg, userID, d)
	}
}

func initNewDraft(ctx context.Context, ctxBot telebot.Context, userID int64, d domain.UseCases) error {
	draft := &dto.QuestionDraft{Step: 1}
	if err := d.SetDraftQuestion(ctx, userID, draft); err != nil {
		return err
	}

	// –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
	if err := sendWithoutKeyboard(ctxBot, "–°–æ–∑–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞: "); err != nil {
		return err
	}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ —Ç–µ–≥–æ–≤
	return tags.ShowEditTagList(ctx, d)(ctxBot)
}

func cancelDraft(ctx context.Context, ctxBot telebot.Context, userID int64, d domain.UseCases) error {
	if err := d.DeleteDraftQuestion(ctx, userID); err != nil {
		return err
	}
	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
	return sendWithMainKeyboard(ctxBot, MSG_CANCEL)
}

func updateUserQuestion(
	ctx context.Context, ctxBot telebot.Context, draft *dto.QuestionDraft, msg string, userID int64, d domain.UseCases,
) error {
	switch {
	case draft.TagID != 0:
		return updateTag(ctx, ctxBot, draft, msg, userID, d)
	case draft.QuestionIDByName != 0:
		return updateQuestionName(ctx, ctxBot, draft, msg, userID, d)
	case draft.AnswerID != 0:
		return updateAnswer(ctx, ctxBot, draft, msg, userID, d)
	case draft.QuestionIDByTag != 0:
		return updateTagByQuestion(ctx, ctxBot, draft, msg, userID, d)
	}
	return nil
}

// updateTag –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–µ–≥–∞
func updateTag(
	ctx context.Context, ctxBot telebot.Context, draft *dto.QuestionDraft, msg string, userID int64, d domain.UseCases,
) error {
	if err := d.UpdateTag(ctx, draft.TagID, msg); err != nil {
		return err
	}
	if err := d.DeleteDraftQuestion(ctx, userID); err != nil {
		return err
	}
	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	return sendWithMainKeyboard(ctxBot, MSG_SUCCESS_UPDATE_TAG)
}

// updateQuestionName –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
func updateQuestionName(
	ctx context.Context, ctxBot telebot.Context, draft *dto.QuestionDraft, msg string, userID int64, d domain.UseCases,
) error {
	if err := d.UpdateQuestionName(ctx, draft.QuestionIDByName, msg); err != nil {
		return err
	}
	if err := d.DeleteDraftQuestion(ctx, userID); err != nil {
		return err
	}
	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	return sendWithMainKeyboard(ctxBot, MSG_SUCCESS_UPDATE_NAME_QUESTION)
}

// updateAnswer –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
func updateAnswer(
	ctx context.Context, ctxBot telebot.Context, draft *dto.QuestionDraft, msg string, userID int64, d domain.UseCases,
) error {
	if err := d.UpdateAnswer(ctx, draft.AnswerID, msg); err != nil {
		return err
	}
	if err := d.DeleteDraftQuestion(ctx, userID); err != nil {
		return err
	}
	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	return sendWithMainKeyboard(ctxBot, MSG_SUCCESS_UPDATE_ANSWER)
}

// updateTagByQuestion –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–≥ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
func updateTagByQuestion(
	ctx context.Context, ctxBot telebot.Context, draft *dto.QuestionDraft, msg string, userID int64, d domain.UseCases,
) error {
	tag := ""

	if ctxBot.Callback() != nil {
		tag = ctxBot.Callback().Data
	} else if ctxBot.Message().Text != BTN_ADD_QUESTION && ctxBot.Message().Text != MSG_ADD_TAG {
		tag = ctxBot.Message().Text
	}

	if tag == "" {
		return nil
	}

	if err := d.UpdateTagByQuestion(ctx, draft.QuestionIDByTag, tag); err != nil {
		return err
	}
	if err := d.DeleteDraftQuestion(ctx, userID); err != nil {
		return err
	}
	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	return sendWithMainKeyboard(ctxBot, MSG_SUCCESS_UPDATE_TAG_BY_QUESTION)
}

func createUserQuestion(
	ctx context.Context, ctxBot telebot.Context, draft *dto.QuestionDraft, msg string, userID int64, d domain.UseCases,
) error {
	switch draft.Step {
	case 1:
		return processTagSelection(ctx, ctxBot, draft, userID, d)
	case 2:
		return processQuestionInput(ctx, ctxBot, draft, userID, msg, d)
	case 3:
		return processCorrectAnswerInputAndSaveQuestion(ctx, ctxBot, draft, userID, msg, d)
	}
	return nil
}

func processTagSelection(
	ctx context.Context, ctxBot telebot.Context, draft *dto.QuestionDraft, userID int64, d domain.UseCases,
) error {
	tag := ""

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥)
	if ctxBot.Message() != nil && ctxBot.Message().Text != "" {
		tag = strings.TrimSpace(ctxBot.Message().Text)
	}

	// –ï—Å–ª–∏ —Ç–µ–≥ –Ω–µ –≤—ã–±—Ä–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ —Å–Ω–æ–≤–∞
	if tag == "" {
		return tags.ShowEditTagList(ctx, d)(ctxBot)
	}

	draft.Tag = tag
	draft.Step++

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫ –≤ –∫—ç—à
	if err := d.SetDraftQuestion(ctx, userID, draft); err != nil {
		return err
	}

	return sendWithoutKeyboard(ctxBot, MSG_ADD_QUESTION)
}

// processQuestionInput –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞
func processQuestionInput(
	ctx context.Context, ctxBot telebot.Context, draft *dto.QuestionDraft, userID int64, msg string, d domain.UseCases,
) error {
	draft.Question = msg
	draft.Step++

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫ –≤ –∫—ç—à
	if err := d.SetDraftQuestion(ctx, userID, draft); err != nil {
		return err
	}

	return sendWithoutKeyboard(ctxBot, MSG_ADD_CORRECT_ANSWER)
}

func processCorrectAnswerInputAndSaveQuestion(
	ctx context.Context, ctxBot telebot.Context, draft *dto.QuestionDraft, userID int64, msg string, d domain.UseCases,
) error {
	draft.Answers = append(draft.Answers, msg)

	// –£–¥–∞–ª—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ (–¥–∞–∂–µ –µ—Å–ª–∏ –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞)
	defer d.DeleteDraftQuestion(ctx, userID)

	if err := d.SaveQuestions(ctx, draft.Question, draft.Tag, draft.Answers, userID); err != nil {
		return err
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
	return sendWithMainKeyboard(ctxBot, MSG_SUCCESS)
}

// HandleTagSelection –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–≥–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞
func HandleTagSelection(ctx context.Context, d domain.UseCases) telebot.HandlerFunc {
	return func(ctxBot telebot.Context) error {
		tagName := ctxBot.Data()
		userID := middleware.GetUserFromContext(ctxBot).TGUserID

		// –ü–æ–ª—É—á–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
		draft, err := d.GetDraftQuestion(ctx, userID)
		if err != nil {
			return ctxBot.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞: " + err.Error())
		}

		if draft == nil {
			return ctxBot.Send("‚ùå –ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –∑–∞–Ω–æ–≤–æ.")
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–µ–≥ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫
		draft.Tag = tagName
		draft.Step++

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫
		if err = d.SetDraftQuestion(ctx, userID, draft); err != nil {
			return ctxBot.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–≥–∞: " + err.Error())
		}

		// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–µ–≥–æ–≤
		if err = ctxBot.Delete(); err != nil {
			// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
		}

		// –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤–≤–æ–¥—É –≤–æ–ø—Ä–æ—Å–∞ (–±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)
		return sendWithoutKeyboard(ctxBot, "–í—ã –≤—ã–±—Ä–∞–ª–∏: "+tagName+"\n"+MSG_ADD_QUESTION)
	}
}
