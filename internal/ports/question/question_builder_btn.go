package question

import (
	"bot/internal/repo/edu"
	"fmt"
	"gopkg.in/telebot.v3"
	"time"
)

// QuestionButtonBuilder –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
type QuestionButtonBuilder struct {
	questions  edu.UsersQuestionSlice
	totalCount int
	page       int
	tag        string
	tagPage    int
}

// BuilderOptions –æ–ø—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∏–ª–¥–µ—Ä–∞
type BuilderOptions struct {
	Questions  edu.UsersQuestionSlice
	TotalCount int
	Page       int
	Tag        string
	TagPage    int
}

// BuilderOption —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ü–∏–π
type BuilderOption func(*BuilderOptions)

// NewQuestionButtonBuilder —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∏–ª–¥–µ—Ä–∞ –∫–Ω–æ–ø–æ–∫ —Å –æ–ø—Ü–∏—è–º–∏
func NewQuestionButtonBuilder(opts ...BuilderOption) *QuestionButtonBuilder {
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	options := &BuilderOptions{
		Questions:  edu.UsersQuestionSlice{},
		TotalCount: 0,
		Page:       0,
		Tag:        "",
		TagPage:    0,
	}

	// –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏
	for _, opt := range opts {
		opt(options)
	}

	return &QuestionButtonBuilder{
		questions:  options.Questions,
		totalCount: options.TotalCount,
		page:       options.Page,
		tag:        options.Tag,
		tagPage:    options.TagPage,
	}
}

// WithQuestions —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã
func WithQuestions(questions edu.UsersQuestionSlice) BuilderOption {
	return func(o *BuilderOptions) {
		o.Questions = questions
	}
}

// WithTotalCount —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
func WithTotalCount(totalCount int) BuilderOption {
	return func(o *BuilderOptions) {
		o.TotalCount = totalCount
	}
}

// WithTagPage —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç—ç–≥–∞
func WithTagPage(totalCount int) BuilderOption {
	return func(o *BuilderOptions) {
		o.TagPage = totalCount
	}
}

// WithPage —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
func WithPage(page int) BuilderOption {
	return func(o *BuilderOptions) {
		o.Page = page
	}
}

// WithTag —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–≥
func WithTag(tag string) BuilderOption {
	return func(o *BuilderOptions) {
		o.Tag = tag
	}
}

// BuildQuestionsPage —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
func (b *QuestionButtonBuilder) BuildQuestionsPage() (string, [][]telebot.InlineButton) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤–æ–ø—Ä–æ—Å—ã
	if b.totalCount == 0 {
		message := fmt.Sprintf("üì≠ –ü–æ —Ç–µ–≥—É '%s' –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤", b.tag)
		keyboard := b.BuildEmptyStateKeyboard()
		return message, keyboard
	}

	totalPages := b.totalPages()
	message := fmt.Sprintf("%s %s (–°—Ç—Ä. %d/%d)", b.tag, MSG_LIST_QUESTION, b.page+1, totalPages)

	keyboard := b.BuildQuestionsKeyboard()

	return message, keyboard
}

// BuildQuestionsKeyboard —Å–æ–∑–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
func (b *QuestionButtonBuilder) BuildQuestionsKeyboard() [][]telebot.InlineButton {
	var btns [][]telebot.InlineButton

	// –ï—Å–ª–∏ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
	if b.totalCount == 0 {
		return b.BuildEmptyStateKeyboard()
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
	for _, q := range b.questions {
		questionRows := b.BuildQuestionRow(q)
		btns = append(btns, questionRows...)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
	if b.totalPages() > 1 {
		paginationRow := b.BuildPaginationButtons()
		btns = append(btns, paginationRow)
	} else {
		// –ï—Å–ª–∏ –≤—Å–µ–≥–æ –æ–¥–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ç–µ–≥–∞–º
		backRow := b.BuildBackToTagsButton()
		btns = append(btns, backRow)
	}

	return btns
}

// BuildEmptyStateKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
func (b *QuestionButtonBuilder) BuildEmptyStateKeyboard() [][]telebot.InlineButton {
	return [][]telebot.InlineButton{
		b.BuildBackToTagsButton(),
	}
}

// BuildBackToTagsButton —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ç–µ–≥–∞–º
func (b *QuestionButtonBuilder) BuildBackToTagsButton() []telebot.InlineButton {
	return []telebot.InlineButton{
		{
			Unique: "back_to_tags",
			Text:   MSG_BACK_TAGS,
			Data:   fmt.Sprintf("%d", b.tagPage),
		},
	}
}

// BuildQuestionRow —Å–æ–∑–¥–∞–µ—Ç —Ä—è–¥ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
func (b *QuestionButtonBuilder) BuildQuestionRow(uq *edu.UsersQuestion) [][]telebot.InlineButton {
	return [][]telebot.InlineButton{
		{b.BuildQuestionTextButton(uq)},
		{
			b.BuildRepeatButton(uq),
			b.BuildDeleteButton(uq),
			b.BuildEditButton(uq),
			b.BuildTimeButton(uq),
		},
	}
}

// BuildInList —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ (–¥–ª—è ViewAnswer)
func (b *QuestionButtonBuilder) BuildInList(uq *edu.UsersQuestion, showAnswer bool) [][]telebot.InlineButton {
	return [][]telebot.InlineButton{
		b.BuildAnswerRow(uq, showAnswer),
		b.BuildDifficultyRow(uq),
		b.BuildActionsRowList(uq),
		b.BuildBackToTagsButton(),
	}
}

func (b *QuestionButtonBuilder) BuildAfterSend(
	uq *edu.UsersQuestion, showAnswer bool,
) [][]telebot.InlineButton {
	return [][]telebot.InlineButton{
		b.BuildAnswerRow(uq, showAnswer),
		b.BuildDifficultyRow(uq),
		b.BuildActionsRow(uq),
	}
}

// BuildAnswerRow —Å–æ–∑–¥–∞–µ—Ç —Ä—è–¥ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–≤–µ—Ç–∞
func (b *QuestionButtonBuilder) BuildAnswerRow(uq *edu.UsersQuestion, showAnswer bool) []telebot.InlineButton {
	return []telebot.InlineButton{
		b.BuildAnswerButton(uq, showAnswer),
	}
}

// BuildDifficultyRow —Å–æ–∑–¥–∞–µ—Ç —Ä—è–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ü–µ–Ω–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
func (b *QuestionButtonBuilder) BuildDifficultyRow(uq *edu.UsersQuestion) []telebot.InlineButton {
	return []telebot.InlineButton{
		b.WithPrefixEmoji("üòé", b.BuildEasyButton(uq)),
		b.WithPrefixEmoji("üòµ", b.BuildForgotButton(uq)),
	}
}

// BuildActionsRowList —Å–æ–∑–¥–∞–µ—Ç —Ä—è–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π (–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ) –≤ —Å–ø–∏—Å–∫–µ
func (b *QuestionButtonBuilder) BuildActionsRowList(uq *edu.UsersQuestion) []telebot.InlineButton {
	return []telebot.InlineButton{
		b.BuildRepeatButton(uq),
		b.BuildDeleteButton(uq),
		b.BuildEditButton(uq),
	}
}

// BuildRepeatButtonList —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–ø–∏—Å–∫–µ
func (b *QuestionButtonBuilder) BuildRepeatButtonList(uq *edu.UsersQuestion) telebot.InlineButton {
	label := "üîî"
	if uq.IsEdu {
		label = "üí§"
	}

	return telebot.InlineButton{
		Unique: INLINE_BTN_REPEAT_QUESTION_AFTER_POLL_HIGH,
		Text:   label,
		Data:   b.makeData(uq.QuestionID),
	}
}

// BuildDeleteButtonList —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
func (b *QuestionButtonBuilder) BuildDeleteButtonList(uq *edu.UsersQuestion) telebot.InlineButton {
	return telebot.InlineButton{
		Unique: INLINE_BTN_DELETE_QUESTION,
		Text:   INLINE_NAME_DELETE,
		Data:   b.makeData(uq.QuestionID),
	}
}

// BuildEditButtonList —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ
func (b *QuestionButtonBuilder) BuildEditButtonList(uq *edu.UsersQuestion) telebot.InlineButton {
	return telebot.InlineButton{
		Unique: INLINE_EDIT_QUESTION,
		Text:   "‚úèÔ∏è",
		Data:   b.makeData(uq.QuestionID),
	}
}

// BuildActionsRow —Å–æ–∑–¥–∞–µ—Ç —Ä—è–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π (–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
func (b *QuestionButtonBuilder) BuildActionsRow(uq *edu.UsersQuestion) []telebot.InlineButton {
	return []telebot.InlineButton{
		b.BuildRepeatButton(uq),
		b.BuildDeleteButton(uq),
		b.BuildEditButton(uq),
	}
}

// BuildAnswerButton —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –æ—Ç–≤–µ—Ç–∞
func (b *QuestionButtonBuilder) BuildAnswerButton(uq *edu.UsersQuestion, showAnswer bool) telebot.InlineButton {
	if showAnswer {
		return telebot.InlineButton{
			Unique: INLINE_TURN_ANSWER,
			Text:   "üìù –°–≤–µ—Ä–Ω—É—Ç—å –æ—Ç–≤–µ—Ç",
			Data:   b.makeData(uq.QuestionID),
		}
	}

	return telebot.InlineButton{
		Unique: INLINE_SHOW_ANSWER,
		Text:   BtnShowAnswer,
		Data:   b.makeData(uq.QuestionID),
	}
}

// BuildEasyButton —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–õ–ï–ì–ö–û" –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å–∞
func (b *QuestionButtonBuilder) BuildEasyButton(uq *edu.UsersQuestion) telebot.InlineButton {
	return telebot.InlineButton{
		Unique: INLINE_REMEMBER_HIGH_QUESTION,
		Text:   MSG_REMEMBER,
		Data:   fmt.Sprintf("%d", uq.QuestionID),
	}
}

// BuildForgotButton —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–°–õ–û–ñ–ù–û" –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å–∞
func (b *QuestionButtonBuilder) BuildForgotButton(uq *edu.UsersQuestion) telebot.InlineButton {
	return telebot.InlineButton{
		Unique: INLINE_FORGOT_HIGH_QUESTION,
		Text:   MSG_FORGOT,
		Data:   fmt.Sprintf("%d", uq.QuestionID),
	}
}

// BuildRepeatButton —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
func (b *QuestionButtonBuilder) BuildRepeatButton(uq *edu.UsersQuestion) telebot.InlineButton {
	label := "üîî"
	if uq.IsEdu {
		label = "üí§"
	}

	return telebot.InlineButton{
		Unique: INLINE_BTN_REPEAT_QUESTION_AFTER_POLL_HIGH,
		Text:   label,
		Data:   fmt.Sprintf("%d", uq.QuestionID),
	}
}

// BuildDeleteButton —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
func (b *QuestionButtonBuilder) BuildDeleteButton(uq *edu.UsersQuestion) telebot.InlineButton {
	return telebot.InlineButton{
		Unique: INLINE_BTN_DELETE_QUESTION_AFTER_POLL_HIGH,
		Text:   INLINE_NAME_DELETE,
		Data:   fmt.Sprintf("%d", uq.QuestionID),
	}
}

// BuildEditButton —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
func (b *QuestionButtonBuilder) BuildEditButton(uq *edu.UsersQuestion) telebot.InlineButton {
	return telebot.InlineButton{
		Unique: INLINE_EDIT_QUESTION,
		Text:   "‚úèÔ∏è",
		Data:   fmt.Sprintf("%d", uq.QuestionID),
	}
}

// BuildTimeButton —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Å –≤—Ä–µ–º–µ–Ω–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
func (b *QuestionButtonBuilder) BuildTimeButton(uq *edu.UsersQuestion) telebot.InlineButton {
	now := time.Now().UTC()
	duration := uq.TimeRepeat.Sub(now)

	return telebot.InlineButton{
		Text: "‚è≥" + b.timeLeftMsg(duration),
	}
}

// BuildQuestionTextButton —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –≤–æ–ø—Ä–æ—Å–∞
func (b *QuestionButtonBuilder) BuildQuestionTextButton(uq *edu.UsersQuestion) telebot.InlineButton {
	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
	questionText := uq.R.Question.Question
	if len(questionText) > 50 {
		questionText = questionText[:47] + "..."
	}

	return telebot.InlineButton{
		Unique: INLINE_SHOW_ANSWER,
		Text:   questionText,
		Data:   b.makeData(uq.QuestionID),
	}
}

// BuildPaginationButtons —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
func (b *QuestionButtonBuilder) BuildPaginationButtons() []telebot.InlineButton {
	var paginationRow []telebot.InlineButton
	totalPages := b.totalPages()

	if b.page > 0 {
		paginationRow = append(paginationRow, telebot.InlineButton{
			Unique: INLINE_BTN_QUESTION_PAGE + "_prev",
			Text:   "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
			Data:   fmt.Sprintf("%d_%s_%d", b.page-1, b.tag, b.tagPage),
		})
	}

	// –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ç–µ–≥–∞–º –≤—Å–µ–≥–¥–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ
	paginationRow = append(paginationRow, telebot.InlineButton{
		Unique: "back_to_tags",
		Text:   MSG_BACK_TAGS,
		Data:   fmt.Sprintf("%d", b.tagPage), // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–µ–≥–æ–≤
	})

	if b.page < totalPages-1 {
		paginationRow = append(paginationRow, telebot.InlineButton{
			Unique: INLINE_BTN_QUESTION_PAGE + "_next",
			Text:   "–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
			Data:   fmt.Sprintf("%d_%s_%d", b.page+1, b.tag, b.tagPage),
		})
	}

	return paginationRow
}

// WithPrefixEmoji –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–º–æ–¥–∑–∏ –∫ —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏
func (b *QuestionButtonBuilder) WithPrefixEmoji(emoji string, button telebot.InlineButton) telebot.InlineButton {
	button.Text = emoji + " " + button.Text
	return button
}

// WithSuffixEmoji –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–º–æ–¥–∑–∏ –ø–æ—Å–ª–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
func (b *QuestionButtonBuilder) WithSuffixEmoji(button telebot.InlineButton, emoji string) telebot.InlineButton {
	button.Text = button.Text + " " + emoji
	return button
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
func (b *QuestionButtonBuilder) makeData(qID int64) string {
	return fmt.Sprintf("%d_%d_%s", qID, b.page, b.tag)
}

func (b *QuestionButtonBuilder) timeLeftMsg(duration time.Duration) string {
	if duration < 0 {
		return "–≥–æ—Ç–æ–≤"
	}

	if duration < time.Hour {
		return fmt.Sprintf("%.0fm", duration.Minutes())
	}
	if duration < 24*time.Hour {
		return fmt.Sprintf("%.0fh", duration.Hours())
	}
	return fmt.Sprintf("%.0fd", duration.Hours()/24)
}

func (b *QuestionButtonBuilder) totalPages() int {
	if b.totalCount == 0 {
		return 0
	}
	return (b.totalCount + QuestionsPerPage - 1) / QuestionsPerPage
}

// WithPrefixEmoji –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–º–æ–¥–∑–∏ –∫ —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏ (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
func WithPrefixEmoji(emoji string, button telebot.InlineButton) telebot.InlineButton {
	button.Text = emoji + " " + button.Text
	return button
}
