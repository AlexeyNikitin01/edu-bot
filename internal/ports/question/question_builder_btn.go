package question

import (
	"bot/internal/repo/edu"
	"fmt"
	"gopkg.in/telebot.v3"
	"time"
)

// QuestionButtonBuilder –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
type QuestionButtonBuilder struct{}

// NewQuestionButtonBuilder —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∏–ª–¥–µ—Ä–∞ –∫–Ω–æ–ø–æ–∫
func NewQuestionButtonBuilder() *QuestionButtonBuilder {
	return &QuestionButtonBuilder{}
}

// BuildAnswerButton —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –æ—Ç–≤–µ—Ç–∞
func (b *QuestionButtonBuilder) BuildAnswerButton(uq *edu.UsersQuestion, showAnswer bool) telebot.InlineButton {
	if showAnswer {
		return telebot.InlineButton{
			Unique: INLINE_TURN_ANSWER,
			Text:   "üìù –°–≤–µ—Ä–Ω—É—Ç—å –æ—Ç–≤–µ—Ç",
			Data:   fmt.Sprintf("%d", uq.QuestionID),
		}
	}

	return telebot.InlineButton{
		Unique: INLINE_SHOW_ANSWER,
		Text:   BtnShowAnswer,
		Data:   fmt.Sprintf("%d", uq.QuestionID),
	}
}

// BuildEasyButton —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–õ–ï–ì–ö–û" –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å–∞
func (b *QuestionButtonBuilder) BuildEasyButton(uq *edu.UsersQuestion) telebot.InlineButton {
	return telebot.InlineButton{
		Unique: INLINE_REMEMBER_HIGH_QUESTION,
		Text:   MSG_REMEMBER,
		Data:   fmt.Sprintf("%d", uq.QuestionID),
	}
}

// BuildForgotButton —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–°–õ–û–ñ–ù–û" –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å–∞
func (b *QuestionButtonBuilder) BuildForgotButton(uq *edu.UsersQuestion) telebot.InlineButton {
	return telebot.InlineButton{
		Unique: INLINE_FORGOT_HIGH_QUESTION,
		Text:   MSG_FORGOT,
		Data:   fmt.Sprintf("%d", uq.QuestionID),
	}
}

// BuildRepeatButton —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
func (b *QuestionButtonBuilder) BuildRepeatButton(uq *edu.UsersQuestion, page int, tag string) telebot.InlineButton {
	label := "üîî"
	if uq.IsEdu {
		label = "üí§"
	}

	return telebot.InlineButton{
		Unique: INLINE_BTN_REPEAT_QUESTION_AFTER_POLL_HIGH,
		Text:   label,
		Data:   b.makeData(uq.QuestionID, page, tag),
	}
}

// BuildDeleteButton —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
func (b *QuestionButtonBuilder) BuildDeleteButton(uq *edu.UsersQuestion, page int, tag string) telebot.InlineButton {
	return telebot.InlineButton{
		Unique: INLINE_BTN_DELETE_QUESTION,
		Text:   INLINE_NAME_DELETE,
		Data:   fmt.Sprintf("%d", uq.QuestionID),
	}
}

// BuildEditButton —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
func (b *QuestionButtonBuilder) BuildEditButton(uq *edu.UsersQuestion) telebot.InlineButton {
	return telebot.InlineButton{
		Unique: INLINE_EDIT_QUESTION,
		Text:   "‚úèÔ∏è",
		Data:   fmt.Sprintf("%d", uq.QuestionID),
	}
}

// BuildTimeButton —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Å –≤—Ä–µ–º–µ–Ω–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
func (b *QuestionButtonBuilder) BuildTimeButton(uq *edu.UsersQuestion) telebot.InlineButton {
	now := time.Now().UTC()
	duration := uq.TimeRepeat.Sub(now)

	return telebot.InlineButton{
		Text: "‚è≥" + b.timeLeftMsg(duration),
	}
}

// BuildQuestionTextButton —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –≤–æ–ø—Ä–æ—Å–∞
func (b *QuestionButtonBuilder) BuildQuestionTextButton(q *edu.Question, page int, tag string) telebot.InlineButton {
	return telebot.InlineButton{
		Text: q.Question,
		Data: b.makeData(q.ID, page, tag),
	}
}

// BuildPaginationButtons —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
func (b *QuestionButtonBuilder) BuildPaginationButtons(page int, totalPages int, tag string) []telebot.InlineButton {
	var paginationRow []telebot.InlineButton

	if page > 0 {
		paginationRow = append(paginationRow, telebot.InlineButton{
			Unique: INLINE_BTN_QUESTION_PAGE + "_prev",
			Text:   "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
			Data:   fmt.Sprintf("%d_%s", page-1, tag),
		})
	}

	// –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ç–µ–≥–∞–º –≤—Å–µ–≥–¥–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ
	paginationRow = append(paginationRow, telebot.InlineButton{
		Unique: INLINE_BACK_TAGS,
		Text:   MSG_BACK_TAGS,
	})

	if page < totalPages-1 {
		paginationRow = append(paginationRow, telebot.InlineButton{
			Unique: INLINE_BTN_QUESTION_PAGE + "_next",
			Text:   "–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
			Data:   fmt.Sprintf("%d_%s", page+1, tag),
		})
	}

	return paginationRow
}

// BuildQuestionRow —Å–æ–∑–¥–∞–µ—Ç —Ä—è–¥ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
func (b *QuestionButtonBuilder) BuildQuestionRow(q *edu.Question, uq *edu.UsersQuestion, page int, tag string) [][]telebot.InlineButton {
	return [][]telebot.InlineButton{
		{b.BuildQuestionTextButton(q, page, tag)},
		{
			b.BuildRepeatButton(uq, page, tag),
			b.BuildDeleteButton(uq, page, tag),
			b.BuildEditButton(uq),
			b.BuildTimeButton(uq),
		},
	}
}

// BuildQuestionsKeyboard —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
func (b *QuestionButtonBuilder) BuildQuestionsKeyboard(questions []*edu.Question, userQuestions map[int64]*edu.UsersQuestion, page int, tag string) [][]telebot.InlineButton {
	var btns [][]telebot.InlineButton

	for _, q := range questions {
		if uq, exists := userQuestions[q.ID]; exists {
			questionRows := b.BuildQuestionRow(q, uq, page, tag)
			btns = append(btns, questionRows...)
		}
	}

	return btns
}

// BuildFullKeyboard —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
func (b *QuestionButtonBuilder) BuildFullKeyboard(uq *edu.UsersQuestion, showAnswer bool) [][]telebot.InlineButton {
	return [][]telebot.InlineButton{
		b.BuildAnswerRow(uq, showAnswer),
		b.BuildDifficultyRow(uq),
		b.BuildActionsRow(uq, -1, ""),
	}
}

// BuildAnswerRow —Å–æ–∑–¥–∞–µ—Ç —Ä—è–¥ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–≤–µ—Ç–∞
func (b *QuestionButtonBuilder) BuildAnswerRow(uq *edu.UsersQuestion, showAnswer bool) []telebot.InlineButton {
	return []telebot.InlineButton{
		b.BuildAnswerButton(uq, showAnswer),
	}
}

// BuildDifficultyRow —Å–æ–∑–¥–∞–µ—Ç —Ä—è–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ü–µ–Ω–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
func (b *QuestionButtonBuilder) BuildDifficultyRow(uq *edu.UsersQuestion) []telebot.InlineButton {
	return []telebot.InlineButton{
		b.BuildEasyButton(uq),
		b.BuildForgotButton(uq),
	}
}

// BuildActionsRow —Å–æ–∑–¥–∞–µ—Ç —Ä—è–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π (–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
func (b *QuestionButtonBuilder) BuildActionsRow(uq *edu.UsersQuestion, page int, tag string) []telebot.InlineButton {
	return []telebot.InlineButton{
		b.BuildRepeatButton(uq, page, tag),
		b.BuildDeleteButton(uq, page, tag),
		b.BuildEditButton(uq),
	}
}

// BuildMinimalKeyboard —Å–æ–∑–¥–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (—Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å)
func (b *QuestionButtonBuilder) BuildMinimalKeyboard(uq *edu.UsersQuestion, showAnswer bool) [][]telebot.InlineButton {
	return [][]telebot.InlineButton{
		b.BuildAnswerRow(uq, showAnswer),
		b.BuildDifficultyRow(uq),
	}
}

// BuildActionsOnlyKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
func (b *QuestionButtonBuilder) BuildActionsOnlyKeyboard(uq *edu.UsersQuestion, page int, tag string) [][]telebot.InlineButton {
	return [][]telebot.InlineButton{
		b.BuildActionsRow(uq, page, tag),
	}
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
func (b *QuestionButtonBuilder) makeData(qID int64, page int, tag string) string {
	if page == -1 && tag == "" {
		return fmt.Sprintf("%d", qID)
	}
	if page == -1 {
		return fmt.Sprintf("%d_%s", qID, tag)
	}
	if tag == "" {
		return fmt.Sprintf("%d_%d", qID, page)
	}
	return fmt.Sprintf("%d_%d_%s", qID, page, tag)
}

func (b *QuestionButtonBuilder) timeLeftMsg(duration time.Duration) string {
	if duration < time.Hour {
		return fmt.Sprintf("%.0fm", duration.Minutes())
	}
	if duration < 24*time.Hour {
		return fmt.Sprintf("%.0fh", duration.Hours())
	}
	return fmt.Sprintf("%.0fd", duration.Hours()/24)
}

func WithPrefixEmoji(text string, t telebot.InlineButton) telebot.InlineButton {
	t.Text = text + " " + t.Text
	return t
}
