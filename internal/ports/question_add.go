package ports

import (
	"errors"
	"strconv"
	"strings"

	"gopkg.in/telebot.v3"

	"bot/internal/app"
	"bot/internal/repo/edu"
)

// –û—à–∏–±–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
var (
	ErrGetTag = errors.New("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—ç–≥–æ–≤")
	ErrSave   = errors.New("–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å")
)

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
const (
	MSG_ADD_TAG                        = "üè∑ –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç—ç–≥ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã: "
	MSG_ADD_QUESTION                   = "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
	MSG_ADD_CORRECT_ANSWER             = "‚úç‚úÖ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã: "
	MSG_CANCEL                         = "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µüëä!"
	MSG_SUCCESS                        = "‚úÖ –£—Å–ø–µ—Ö!"
	MSG_EDIT                           = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã: "
	MSG_SUCCESS_UPDATE_TAG             = "–¢—ç–≥ –æ–±–Ω–æ–≤–ª–µ–Ω"
	MSG_SUCCESS_UPDATE_NAME_QUESTION   = "–í–æ–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω"
	MSG_SUCCESS_UPDATE_ANSWER          = "–û—Ç–≤–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω"
	MSG_EDIT_TAG_BY_QUESTION           = "–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç—ç–≥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã: "
	MSG_SUCCESS_UPDATE_TAG_BY_QUESTION = "–¢—ç–≥ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω"
)

// QuestionDraft –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
type QuestionDraft struct {
	Step             int      // –¢–µ–∫—É—â–∏–π —à–∞–≥ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è
	Question         string   // –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
	Tag              string   // –¢–µ–≥ –≤–æ–ø—Ä–æ—Å–∞
	Answers          []string // –°–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤
	TagID            int64    // ID —Ç–µ–≥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	QuestionIDByTag  int64    // ID –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–≥–∞
	QuestionIDByName int64    // ID –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
	AnswerID         int64    // ID –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
}

// drafts —Ö—Ä–∞–Ω–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏—Ö ID
var drafts = make(map[int64]*QuestionDraft)

// setEdit –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è
// field - —Ç–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–µ–≥, –≤–æ–ø—Ä–æ—Å, –æ—Ç–≤–µ—Ç)
// domain - —Å–ª–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
func setEdit(field string, domain app.Apper) telebot.HandlerFunc {
	return func(ctx telebot.Context) (err error) {
		// –ü–∞—Ä—Å–∏–º ID —Å—É—â–Ω–æ—Å—Ç–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö callback
		strID := ctx.Data()
		id, err := strconv.Atoi(strID)
		if err != nil {
			return err
		}

		// –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		user := GetUserFromContext(ctx)
		draft, exists := drafts[user.TGUserID]
		if !exists {
			drafts[user.TGUserID] = &QuestionDraft{Step: 1}
			draft, _ = drafts[user.TGUserID]
		}

		if draft == nil {
			return nil
		}

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π ID –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
		switch field {
		case edu.TableNames.Tags:
			draft.TagID = int64(id)
		case edu.QuestionTableColumns.Question:
			draft.QuestionIDByName = int64(id)
		case edu.QuestionTableColumns.TagID:
			draft.QuestionIDByTag = int64(id)
			// –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–≥–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–≥–æ–≤
			if err = getTags(ctx, user.TGUserID, domain); err != nil {
				return err
			}
			return ctx.Send(MSG_EDIT_TAG_BY_QUESTION)
		case edu.AnswerTableColumns.Answer:
			draft.AnswerID = int64(id)
		}

		return ctx.Send(MSG_EDIT)
	}
}

// upsertUserQuestion –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
func upsertUserQuestion(domain app.Apper) telebot.HandlerFunc {
	return func(ctx telebot.Context) (err error) {
		msg := strings.TrimSpace(ctx.Message().Text)
		u := GetUserFromContext(ctx)

		// –ü–æ–ª—É—á–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		draft, exists := drafts[u.TGUserID]
		if !exists {
			return initNewDraft(ctx, u, domain)
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è
		if msg == CMD_CANCEL {
			return cancelDraft(ctx, u)
		}

		// –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
		if draft.TagID != 0 || draft.QuestionIDByName != 0 || draft.AnswerID != 0 || draft.QuestionIDByTag != 0 {
			return updateUserQuestion(ctx, draft, msg, u, domain)
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
		return createUserQuestion(ctx, draft, msg, u, domain)
	}
}

// initNewDraft –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–≥–æ–≤
func initNewDraft(ctx telebot.Context, u *edu.User, domain app.Apper) error {
	drafts[u.TGUserID] = &QuestionDraft{Step: 1}
	if err := ctx.Send(MSG_LIST_TAGS); err != nil {
		return err
	}
	return getTags(ctx, u.TGUserID, domain)
}

// cancelDraft –æ—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π —á–µ—Ä–Ω–æ–≤–∏–∫ –∏ –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
func cancelDraft(ctx telebot.Context, u *edu.User) error {
	delete(drafts, u.TGUserID)
	return ctx.Send(MSG_CANCEL)
}

// updateUserQuestion –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π (—Ç–µ–≥–æ–≤, –≤–æ–ø—Ä–æ—Å–æ–≤, –æ—Ç–≤–µ—Ç–æ–≤)
// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
func updateUserQuestion(ctx telebot.Context, draft *QuestionDraft, msg string, u *edu.User, domain app.Apper) error {
	switch {
	case draft.TagID != 0:
		return updateTag(ctx, draft, msg, u, domain)
	case draft.QuestionIDByName != 0:
		return updateQuestionName(ctx, draft, msg, u, domain)
	case draft.AnswerID != 0:
		return updateAnswer(ctx, draft, msg, u, domain)
	case draft.QuestionIDByTag != 0:
		return updateTagByQuestion(ctx, draft, u, domain)
	}
	return nil
}

// updateTag –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–µ–≥–∞
func updateTag(ctx telebot.Context, draft *QuestionDraft, msg string, u *edu.User, domain app.Apper) error {
	if err := domain.UpdateTag(GetContext(ctx), draft.TagID, msg); err != nil {
		return err
	}
	delete(drafts, u.TGUserID)
	return ctx.Send(MSG_SUCCESS_UPDATE_TAG)
}

// updateQuestionName –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
func updateQuestionName(ctx telebot.Context, draft *QuestionDraft, msg string, u *edu.User, domain app.Apper) error {
	if err := domain.UpdateQuestionName(GetContext(ctx), draft.QuestionIDByName, msg); err != nil {
		return err
	}
	delete(drafts, u.TGUserID)
	return ctx.Send(MSG_SUCCESS_UPDATE_NAME_QUESTION)
}

// updateAnswer –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
func updateAnswer(ctx telebot.Context, draft *QuestionDraft, msg string, u *edu.User, domain app.Apper) error {
	if err := domain.UpdateAnswer(GetContext(ctx), draft.AnswerID, msg); err != nil {
		return err
	}
	delete(drafts, u.TGUserID)
	return ctx.Send(MSG_SUCCESS_UPDATE_ANSWER)
}

// updateTagByQuestion –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–≥ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–≥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ
func updateTagByQuestion(ctx telebot.Context, draft *QuestionDraft, u *edu.User, domain app.Apper) error {
	tag := ""

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ callback
	if ctx.Callback() != nil {
		tag = ctx.Callback().Data
	} else if ctx.Message().Text != BTN_ADD_QUESTION && ctx.Message().Text != MSG_ADD_TAG {
		tag = ctx.Message().Text
	}

	// –ï—Å–ª–∏ —Ç–µ–≥ –Ω–µ –≤—ã–±—Ä–∞–Ω, –≤—ã—Ö–æ–¥–∏–º –±–µ–∑ –æ—à–∏–±–∫–∏
	if tag == "" {
		return nil
	}

	if err := domain.UpdateTagByQuestion(GetContext(ctx), draft.QuestionIDByTag, tag); err != nil {
		return err
	}
	delete(drafts, u.TGUserID)
	return ctx.Send(MSG_SUCCESS_UPDATE_TAG_BY_QUESTION)
}

// createUserQuestion –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
// –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ —à–∞–≥–∏: –≤—ã–±–æ—Ä —Ç–µ–≥–∞ ‚Üí –≤–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞ ‚Üí –≤–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞
func createUserQuestion(ctx telebot.Context, draft *QuestionDraft, msg string, u *edu.User, domain app.Apper) error {
	switch draft.Step {
	case 1:
		return processTagSelection(ctx, draft)
	case 2:
		return processQuestionInput(ctx, draft, msg)
	case 3:
		return processCorrectAnswerInputAndSaveQuestion(ctx, draft, msg, u, domain)
	}
	return nil
}

// processTagSelection –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–≥–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–µ–≥–∞
func processTagSelection(ctx telebot.Context, draft *QuestionDraft) error {
	tag := ""

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ callback
	if ctx.Callback() != nil {
		tag = ctx.Callback().Data
	} else if ctx.Message().Text != BTN_ADD_QUESTION && ctx.Message().Text != MSG_ADD_TAG {
		tag = ctx.Message().Text
	}

	// –ï—Å–ª–∏ —Ç–µ–≥ –Ω–µ –≤—ã–±—Ä–∞–Ω, –≤—ã—Ö–æ–¥–∏–º –±–µ–∑ –æ—à–∏–±–∫–∏
	if tag == "" {
		return nil
	}

	draft.Tag = tag
	draft.Step++
	return ctx.Send(MSG_ADD_QUESTION)
}

// processQuestionInput –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞
func processQuestionInput(ctx telebot.Context, draft *QuestionDraft, msg string) error {
	draft.Question = msg
	draft.Step++
	return ctx.Send(MSG_ADD_CORRECT_ANSWER)
}

// processCorrectAnswerInputAndSaveQuestion –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–æ–ø—Ä–æ—Å
// –ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—á–∏—â–∞–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫
func processCorrectAnswerInputAndSaveQuestion(ctx telebot.Context, draft *QuestionDraft, msg string, u *edu.User, domain app.Apper) error {
	draft.Answers = append(draft.Answers, msg)
	defer delete(drafts, u.TGUserID)

	if err := domain.SaveQuestions(
		GetContext(ctx), draft.Question, draft.Tag, draft.Answers, u.TGUserID,
	); err != nil {
		return ctx.Send(errors.Join(ErrSave, err).Error())
	}

	return ctx.Send(MSG_SUCCESS, mainMenu())
}

// getTags –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏—Ö –∫–∞–∫ inline-–∫–Ω–æ–ø–∫–∏
// –ï—Å–ª–∏ —Ç–µ–≥–æ–≤ –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–µ–≥
func getTags(ctx telebot.Context, userID int64, domain app.Apper) error {
	ts, err := domain.GetUniqueTags(GetContext(ctx), userID)
	if err != nil {
		return ctx.Send(errors.Join(ErrGetTag, err).Error())
	}

	var btns [][]telebot.InlineButton

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ–≥–∞
	for _, t := range ts {
		btn := telebot.InlineButton{
			Unique: INLINE_BTN_TAGS,
			Text:   t.Tag,
			Data:   t.Tag,
		}
		btns = append(btns, []telebot.InlineButton{btn})
	}

	// –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–≥–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö —Å–ø–∏—Å–∫–æ–º
	if len(btns) != 0 {
		if err = ctx.Send(MSG_ADD_TAG, &telebot.ReplyMarkup{
			InlineKeyboard: btns,
		}); err != nil {
			return ctx.Send(errors.Join(ErrGetTag, err).Error())
		}
		return nil
	}

	// –ï—Å–ª–∏ —Ç–µ–≥–æ–≤ –Ω–µ—Ç, –ø—Ä–æ—Å–∏–º –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π
	return ctx.Send(MSG_ADD_TAG)
}
