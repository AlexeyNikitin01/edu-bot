package ports

import (
	"errors"
	"strconv"
	"strings"

	"gopkg.in/telebot.v3"

	"bot/internal/app"
	"bot/internal/repo/edu"
)

var (
	ErrGetTag       = errors.New("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—ç–≥–æ–≤")
	ErrLengthAnswer = errors.New("–æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—à—å—à–µ 100 —Å–∏–º–≤–æ–ª–æ–≤")
	ErrSave         = errors.New("–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å")
)

const (
	MSG_ADD_TAG                        = "üè∑ –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç—ç–≥ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã: "
	MSG_ADD_QUESTION                   = "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
	MSG_ADD_CORRECT_ANSWER             = "‚úç‚úÖ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã: "
	MSG_CANCEL                         = "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µüëä!"
	MSG_SUCCESS                        = "‚úÖ –£—Å–ø–µ—Ö!"
	MSG_EDIT                           = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã: "
	MSG_SUCCESS_UPDATE_TAG             = "–¢—ç–≥ –æ–±–Ω–æ–≤–ª–µ–Ω"
	MSG_SUCCESS_UPDATE_NAME_QUESTION   = "–í–æ–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω"
	MSG_SUCCESS_UPDATE_ANSWER          = "–û—Ç–≤–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω"
	MSG_EDIT_TAG_BY_QUESTION           = "–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç—ç–≥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã: "
	MSG_SUCCESS_UPDATE_TAG_BY_QUESTION = "–¢—ç–≥ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω"
)

type QuestionDraft struct {
	Step             int
	Question         string
	Tag              string
	Answers          []string
	TagID            int64
	QuestionIDByTag  int64
	QuestionIDByName int64
	AnswerID         int64
}

var drafts = make(map[int64]*QuestionDraft)

func setEdit(field string, domain app.Apper) telebot.HandlerFunc {
	return func(ctx telebot.Context) (err error) {
		strID := ctx.Data()
		id, err := strconv.Atoi(strID)
		if err != nil {
			return err
		}

		draft, exists := drafts[GetUserFromContext(ctx).TGUserID]
		if !exists {
			drafts[GetUserFromContext(ctx).TGUserID] = &QuestionDraft{Step: 1}
			draft, _ = drafts[GetUserFromContext(ctx).TGUserID]
		}

		if draft == nil {
			return nil
		}

		switch field {
		case edu.TableNames.Tags:
			draft.TagID = int64(id)
		case edu.QuestionTableColumns.Question:
			draft.QuestionIDByName = int64(id)
		case edu.QuestionTableColumns.TagID:
			draft.QuestionIDByTag = int64(id)
			if err = getTags(ctx, GetUserFromContext(ctx).TGUserID, domain); err != nil {
				return err
			}
			return ctx.Send(MSG_EDIT_TAG_BY_QUESTION)
		case edu.AnswerTableColumns.Answer:
			draft.AnswerID = int64(id)
		}

		return ctx.Send(MSG_EDIT)
	}
}

func add(domain app.Apper) telebot.HandlerFunc {
	return func(ctx telebot.Context) (err error) {
		msg := strings.TrimSpace(ctx.Message().Text)
		u := GetUserFromContext(ctx)

		draft, exists := drafts[u.TGUserID]
		if !exists {
			drafts[u.TGUserID] = &QuestionDraft{Step: 1}
			if err = ctx.Send(msg); err != nil {
				return err
			}

			return getTags(ctx, GetUserFromContext(ctx).TGUserID, domain)
		}

		if msg == CMD_CANCEL {
			delete(drafts, u.TGUserID)
			return ctx.Send(MSG_CANCEL)
		}

		//todo: –ø—Ä–∞–≤–∏—Ç—å
		if draft.TagID != 0 {
			if err = domain.UpdateTag(GetContext(ctx), draft.TagID, msg); err != nil {
				return err
			}
			delete(drafts, u.TGUserID)
			return ctx.Send(MSG_SUCCESS_UPDATE_TAG)
		} else if draft.QuestionIDByName != 0 {
			if err = domain.UpdateQuestionName(GetContext(ctx), draft.QuestionIDByName, msg); err != nil {
				return err
			}
			delete(drafts, u.TGUserID)
			return ctx.Send(MSG_SUCCESS_UPDATE_NAME_QUESTION)
		} else if draft.AnswerID != 0 {
			if err = domain.UpdateAnswer(GetContext(ctx), draft.AnswerID, msg); err != nil {
				return err
			}
			delete(drafts, u.TGUserID)
			return ctx.Send(MSG_SUCCESS_UPDATE_ANSWER)
		} else if draft.QuestionIDByTag != 0 {
			newTag, err := setTags(ctx)
			if err != nil {
				return err
			}
			if err = domain.UpdateTagByQuestion(GetContext(ctx), draft.QuestionIDByTag, newTag); err != nil {
				return err
			}
			delete(drafts, u.TGUserID)
			return ctx.Send(MSG_SUCCESS_UPDATE_TAG_BY_QUESTION)
		}

		switch draft.Step {
		case 1:
			draft.Tag, err = setTags(ctx)
			if err != nil {
				return err
			} else if draft.Tag == "" {
				return nil
			}
			draft.Step++
			return ctx.Send(MSG_ADD_QUESTION)
		case 2:
			draft.Question = msg
			draft.Step++
			return ctx.Send(MSG_ADD_CORRECT_ANSWER)
		case 3:
			draft.Answers = append(draft.Answers, msg) // –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
			goto Save
		}
	Save:
		delete(drafts, u.TGUserID)
		if err = domain.SaveQuestions(
			GetContext(ctx), draft.Question, draft.Tag, draft.Answers, u.TGUserID,
		); err != nil {
			return ctx.Send(errors.Join(ErrSave, err).Error())
		}
		return ctx.Send(MSG_SUCCESS, mainMenu())
	}
}

func setTags(ctx telebot.Context) (string, error) {
	if ctx.Callback() != nil {
		return ctx.Callback().Data, nil
	}

	if ctx.Message().Text != BTN_ADD_QUESTION && ctx.Message().Text != MSG_ADD_TAG { // –í–≤–µ–ª–∏ —Å–≤–æ–π —Ç—ç–≥
		return ctx.Message().Text, nil
	}

	return "", nil
}

// getTags todo: –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏
func getTags(ctx telebot.Context, userID int64, domain app.Apper) error {
	ts, err := domain.GetUniqueTags(GetContext(ctx), userID)
	if err != nil {
		return ctx.Send(errors.Join(ErrGetTag, err).Error())
	}

	var btns [][]telebot.InlineButton

	for _, t := range ts {
		btn := telebot.InlineButton{
			Unique: INLINE_BTN_TAGS,
			Text:   t.Tag,
			Data:   t.Tag,
		}
		btns = append(btns, []telebot.InlineButton{btn})
	}

	if len(btns) != 0 {
		if err = ctx.Send(MSG_ADD_TAG, &telebot.ReplyMarkup{
			InlineKeyboard: btns,
		}); err != nil {
			return ctx.Send(errors.Join(ErrGetTag, err).Error())
		}
		return nil
	}

	// –ü—Ä–æ—Å–∏–º –¥–æ–±–∞–≤–∏—Ç—å —Ç—ç–≥, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
	return ctx.Send(MSG_ADD_TAG)
}
