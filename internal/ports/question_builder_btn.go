package ports

import (
	"bot/internal/repo/edu"
	"fmt"
	"gopkg.in/telebot.v3"
)

// QuestionButtonBuilder –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
type QuestionButtonBuilder struct{}

// NewQuestionButtonBuilder —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∏–ª–¥–µ—Ä–∞ –∫–Ω–æ–ø–æ–∫
func NewQuestionButtonBuilder() *QuestionButtonBuilder {
	return &QuestionButtonBuilder{}
}

// BuildAnswerButton —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –æ—Ç–≤–µ—Ç–∞
func (b *QuestionButtonBuilder) BuildAnswerButton(uq *edu.UsersQuestion, showAnswer bool) telebot.InlineButton {
	if showAnswer {
		return telebot.InlineButton{
			Unique: INLINE_TURN_ANSWER,
			Text:   "üìù –°–≤–µ—Ä–Ω—É—Ç—å –æ—Ç–≤–µ—Ç",
			Data:   fmt.Sprintf("%d", uq.QuestionID),
		}
	}

	return telebot.InlineButton{
		Unique: INLINE_SHOW_ANSWER,
		Text:   BtnShowAnswer,
		Data:   fmt.Sprintf("%d", uq.QuestionID),
	}
}

// BuildEasyButton —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–õ–ï–ì–ö–û" –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å–∞
func (b *QuestionButtonBuilder) BuildEasyButton(uq *edu.UsersQuestion) telebot.InlineButton {
	return telebot.InlineButton{
		Unique: INLINE_REMEMBER_HIGH_QUESTION,
		Text:   MSG_REMEMBER,
		Data:   fmt.Sprintf("%d", uq.QuestionID),
	}
}

// BuildForgotButton —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–°–õ–û–ñ–ù–û" –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å–∞
func (b *QuestionButtonBuilder) BuildForgotButton(uq *edu.UsersQuestion) telebot.InlineButton {
	return telebot.InlineButton{
		Unique: INLINE_FORGOT_HIGH_QUESTION,
		Text:   MSG_FORGOT,
		Data:   fmt.Sprintf("%d", uq.QuestionID),
	}
}

// BuildRepeatButton —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
func (b *QuestionButtonBuilder) BuildRepeatButton(uq *edu.UsersQuestion) telebot.InlineButton {
	label := BtnRepeat
	if uq.IsEdu {
		label = BtnRepeatEdu
	}

	return telebot.InlineButton{
		Unique: INLINE_BTN_REPEAT_QUESTION_AFTER_POLL_HIGH,
		Text:   label,
		Data:   fmt.Sprintf("%d", uq.QuestionID),
	}
}

// BuildDeleteButton —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
func (b *QuestionButtonBuilder) BuildDeleteButton(uq *edu.UsersQuestion) telebot.InlineButton {
	return telebot.InlineButton{
		Unique: INLINE_BTN_DELETE_QUESTION_AFTER_POLL_HIGH,
		Text:   BtnDelete,
		Data:   fmt.Sprintf("%d", uq.QuestionID),
	}
}

// BuildEditButton —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
func (b *QuestionButtonBuilder) BuildEditButton(uq *edu.UsersQuestion) telebot.InlineButton {
	return telebot.InlineButton{
		Unique: INLINE_EDIT_QUESTION,
		Text:   BtnEdit,
		Data:   fmt.Sprintf("%d", uq.QuestionID),
	}
}

// BuildAnswerRow —Å–æ–∑–¥–∞–µ—Ç —Ä—è–¥ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–≤–µ—Ç–∞
func (b *QuestionButtonBuilder) BuildAnswerRow(uq *edu.UsersQuestion, showAnswer bool) []telebot.InlineButton {
	return []telebot.InlineButton{
		b.BuildAnswerButton(uq, showAnswer),
	}
}

// BuildDifficultyRow —Å–æ–∑–¥–∞–µ—Ç —Ä—è–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ü–µ–Ω–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
func (b *QuestionButtonBuilder) BuildDifficultyRow(uq *edu.UsersQuestion) []telebot.InlineButton {
	return []telebot.InlineButton{
		b.BuildEasyButton(uq),
		b.BuildForgotButton(uq),
	}
}

// BuildActionsRow —Å–æ–∑–¥–∞–µ—Ç —Ä—è–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π (–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
func (b *QuestionButtonBuilder) BuildActionsRow(uq *edu.UsersQuestion) []telebot.InlineButton {
	return []telebot.InlineButton{
		b.BuildRepeatButton(uq),
		b.BuildDeleteButton(uq),
		b.BuildEditButton(uq),
	}
}

// BuildFullKeyboard —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
func (b *QuestionButtonBuilder) BuildFullKeyboard(uq *edu.UsersQuestion, showAnswer bool) [][]telebot.InlineButton {
	return [][]telebot.InlineButton{
		b.BuildAnswerRow(uq, showAnswer),
		b.BuildDifficultyRow(uq),
		b.BuildActionsRow(uq),
	}
}

// BuildMinimalKeyboard —Å–æ–∑–¥–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (—Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å)
func (b *QuestionButtonBuilder) BuildMinimalKeyboard(uq *edu.UsersQuestion, showAnswer bool) [][]telebot.InlineButton {
	return [][]telebot.InlineButton{
		b.BuildAnswerRow(uq, showAnswer),
		b.BuildDifficultyRow(uq),
	}
}

// BuildActionsOnlyKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
func (b *QuestionButtonBuilder) BuildActionsOnlyKeyboard(uq *edu.UsersQuestion) [][]telebot.InlineButton {
	return [][]telebot.InlineButton{
		b.BuildActionsRow(uq),
	}
}
