package ports

import (
	"time"

	"github.com/volatiletech/sqlboiler/v4/boil"
	"gopkg.in/telebot.v3"

	"bot/internal/repo/edu"
)

type QuestionDraft struct {
	Step     int
	Question string
	Tag      string
	Answers  []string
}

var drafts = make(map[int64]*QuestionDraft)

func add() telebot.HandlerFunc {
	return func(ctx telebot.Context) error {
		tgUser := ctx.Sender()
		userID := tgUser.ID

		u, err := edu.Users(edu.UserWhere.TGUserID.EQ(userID)).One(GetContext(ctx), boil.GetContextDB())
		if err != nil {
			return ctx.Send("‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
		}

		msg := ctx.Message().Text
		draft, exists := drafts[userID]
		if !exists {
			return ctx.Send("‚ÑπÔ∏è –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /add –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å¬ª –≤ –º–µ–Ω—é.")
		}

		switch draft.Step {
		case 1:
			draft.Question = msg
			draft.Step++
			return ctx.Send("üè∑ –í–≤–µ–¥–∏—Ç–µ —Ç—ç–≥ –≤–æ–ø—Ä–æ—Å–∞:")
		case 2:
			draft.Tag = msg
			draft.Step++
			return ctx.Send("‚úÖ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:")
		case 3:
			if len(draft.Answers) > 100 {
				return ctx.Send("‚ÑπÔ∏è –Ω–µ–ª—å–∑—è –±–æ–ª—å—à–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ")
			}
			draft.Answers = append(draft.Answers, msg) // –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
			draft.Step++
			return ctx.Send("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç 1 (–∏–ª–∏ /done, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å):")
		case 4:
			if len(draft.Answers) > 100 {
				return ctx.Send("‚ÑπÔ∏è –Ω–µ–ª—å–∑—è –±–æ–ª—å—à–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ")
			}
			if msg == "/done" {
				goto Save
			}
			draft.Answers = append(draft.Answers, msg)
			return ctx.Send("‚ùå –ï—â—ë –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (–∏–ª–∏ /done):")
		}

	Save:
		q := &edu.Question{
			Question: draft.Question,
			Tag:      draft.Tag,
		}
		if err := q.Insert(GetContext(ctx), boil.GetContextDB(), boil.Infer()); err != nil {
			delete(drafts, userID)
			return ctx.Send("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞.")
		}

		for i, answer := range draft.Answers {
			a := edu.Answer{
				QuestionID: q.ID,
				Answer:     answer,
				IsCorrect:  i == 0,
			}
			if err := a.Insert(GetContext(ctx), boil.GetContextDB(), boil.Infer()); err != nil {
				delete(drafts, userID)
				return ctx.Send("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞.")
			}
		}

		uq := edu.UsersQuestion{
			QuestionID: q.ID,
			UserID:     u.TGUserID,
			IsEdu:      true,
			TimeRepeat: time.Now().Add(time.Minute * 5),
		}
		if err := uq.Insert(GetContext(ctx), boil.GetContextDB(), boil.Infer()); err != nil {
			delete(drafts, userID)
			return ctx.Send("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –≤–æ–ø—Ä–æ—Å–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
		}

		delete(drafts, userID)
		return ctx.Send("‚úÖ –í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", mainMenu())
	}
}
